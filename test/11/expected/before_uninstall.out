-- before_uninstall.sql : prepare the uninstall test
--
-- Record the dblink_user_password parameter
insert into emaj.emaj_param (param_key, param_value_text) 
  values ('dblink_user_password','user=postgres password=postgres');
-- Grant emaj_adm so that the cleanup.sql report be stable
grant emaj_adm to emaj_regression_tests_adm_user1, emaj_regression_tests_adm_user2;
-- Execute the demo scripts
\o /dev/null
\i sql/emaj_demo.sql
-- emaj_demo.sql : Version <devel>
--
-- This script demonstrates the main features of the E-Maj extension.
--
-- This test script must be executed by a role member of emaj_adm (or by a superuser).
--
-- E-Maj extension must have been previously installed.
--
-- At the end of the script's execution, the demo environment is left as is, so that users can examine the results.
-- The script can be run several times in sequence.
-- To remove all traces left by this demo, just 
--     SELECT emaj.emaj_demo_cleanup();
\echo '---------------------------------------------------------------------------'
---------------------------------------------------------------------------
\echo '---                                                                     ---'
---                                                                     ---
\echo '---                          E-Maj Demo start                           ---'
---                          E-Maj Demo start                           ---
\echo '---                                                                     ---'
---                                                                     ---
\echo '---------------------------------------------------------------------------'
---------------------------------------------------------------------------
\set ON_ERROR_STOP
\pset pager off
\set ECHO none
---
--- Check the E-Maj environment.
---
---
--- Create the emaj.emaj_demo_cleanup() function to use later in order to remove objects created by this script.
---
---
--- Get the E-Maj version installed in the current database.
---
SELECT param_value_text FROM emaj.emaj_param WHERE param_key = 'emaj_version';
---------------------------------------------------------------------------
---                                                                     ---
--- Let us create a schema with some application tables and sequences.  ---
--- Note that myTbl3 table name is case sensitive.                      ---
---                                                                     ---
---------------------------------------------------------------------------
DROP SCHEMA IF EXISTS emaj_demo_app_schema CASCADE;
CREATE SCHEMA emaj_demo_app_schema;
SET search_path=emaj_demo_app_schema;
CREATE TABLE emaj_demo_app_schema.myTbl1 (
  col11       DECIMAL(7)       NOT NULL,
  col12       CHAR(10)         NOT NULL,
  col13       BYTEA            ,
  PRIMARY KEY (col11,col12)
);
CREATE TABLE emaj_demo_app_schema.myTbl2 (
  col21       INT              NOT NULL,
  col22       TEXT             ,
  col23       DATE             ,
  PRIMARY KEY (col21)
);
CREATE TABLE emaj_demo_app_schema."myTbl3" (
  col31       SERIAL           NOT NULL,
  col32       TIMESTAMP        DEFAULT now(),
  col33       DECIMAL (12,2)   ,
  PRIMARY KEY (col31)
);
CREATE INDEX myIdx3 ON "myTbl3" (col32,col33);
CREATE TABLE emaj_demo_app_schema.myTbl4 (
  col41       INT              NOT NULL,
  col42       TEXT             ,
  col43       INT              ,
  col44       DECIMAL(7)       ,
  col45       CHAR(10)         ,
  PRIMARY KEY (col41),
  FOREIGN KEY (col43) REFERENCES myTbl2 (col21) DEFERRABLE INITIALLY DEFERRED,
  FOREIGN KEY (col44,col45) REFERENCES myTbl1 (col11,col12) ON DELETE CASCADE
);
CREATE SEQUENCE mySeq1 MINVALUE 1000 MAXVALUE 2000 CYCLE;
---------------------------------------------------------------------------
---                                                                     ---
---  Now let us define and create 2 rollbackable groups                 ---
---  "emaj demo group 1" and "emaj demo group 2".                       ---
---                                                                     ---
---------------------------------------------------------------------------
---
--- Create both table groups.
---
select emaj.emaj_create_group('emaj demo group 1');
select emaj.emaj_create_group('emaj demo group 2');
---
--- Populate both groups.
---
select emaj.emaj_assign_tables('emaj_demo_app_schema',array['mytbl1','mytbl2','mytbl4'],'emaj demo group 1');
select emaj.emaj_assign_table('emaj_demo_app_schema','myTbl3','emaj demo group 2');
select emaj.emaj_assign_sequences('emaj_demo_app_schema','.*','','emaj demo group 2');
---
--- Set a comment for the first table group.
---
select emaj.emaj_comment_group('emaj demo group 1','This group has no sequence');
---
--- Look at our groups in the internal emaj_group table (They are currently not logging).
---
select * from emaj.emaj_group where group_name in ('emaj demo group 1','emaj demo group 2');
---
--- Look at the content of the emaj_emaj_demo_app_schema schema containing our log tables.
---
select relname from pg_class, pg_namespace 
  where relnamespace = pg_namespace.oid and nspname = 'emaj_emaj_demo_app_schema' and relkind = 'r';
---------------------------------------------------------------------------
---                                                                     ---
---  Application tables can be populated, but without logging ... for   ---
---  the moment.                                                        ---
---                                                                     ---
---------------------------------------------------------------------------
---
--- Insert few rows into myTbl1, myTbl2 and myTbl4 tables.
---
insert into myTbl1 
  select i, 'ABC', E'\\000\\001\\002'::bytea from generate_series (1,10) as i;
insert into myTbl2 
  select i, 'ABC', current_date + to_char(i,'99 DAYS')::interval from generate_series (1,10) as i;
insert into myTbl4 values (1,'FK...',1,1,'ABC');
---
---  As log triggers are not yet enabled, log tables remain empty.
---
select * from emaj_emaj_demo_app_schema.mytbl1_log;
---------------------------------------------------------------------------
---                                                                     ---
---  Let us start the first group and perform some table updates.       ---
---                                                                     ---
---------------------------------------------------------------------------
---
--- Start the first group to activate its log triggers.
---
select emaj.emaj_start_group('emaj demo group 1','MARK1');
---
--- Perform 1 INSERT, 1 UPDATE and 1 DELETE on myTbl4.
---
insert into myTbl4 values (2,'FK...',1,1,'ABC');
update myTbl4 set col43 = 2 where col41 = 2;
delete from myTbl4 where col41 = 1;
---
--- Look at the myTbl4 log table.
---
select * from emaj_emaj_demo_app_schema.mytbl4_log;
---------------------------------------------------------------------------
---                                                                     ---
---  Let us set a second mark on "emaj demo group 1" tables group and   ---
---  perform some new tables updates.                                   ---
---                                                                     ---
---------------------------------------------------------------------------
---
--- Set MARK2.
---
select emaj.emaj_set_mark_group('emaj demo group 1','MARK2');
---
--- Perform some updates on myTbl1 and myTbl2.
---
insert into myTbl1 
  select i, 'DEF', E'\\003\\004\\005'::bytea from generate_series (11,20) as i;
delete from myTbl2 where col21 > 8;
---
--- What does the statistic function report about our latest updates?
---
select * from emaj.emaj_log_stat_group('emaj demo group 1','EMAJ_LAST_MARK',NULL);
---
--- And in a more detailed way?
---
select * from emaj.emaj_detailed_log_stat_group('emaj demo group 1','EMAJ_LAST_MARK',NULL);
---------------------------------------------------------------------------
---                                                                     ---
---  Let us set a third mark on "emaj demo group 1" tables group and    ---
---  perform some new tables updates.                                   ---
---                                                                     ---
---------------------------------------------------------------------------
---
--- Set MARK3.
---
select emaj.emaj_set_mark_group('emaj demo group 1','MARK3');
---
--- Perform some updates on myTbl1 and myTbl2.
---
update myTbl4 set col43 = NULL where col41 between 5 and 10;
update myTbl2 set col23 = col23 + '1 YEAR'::interval;
---
--- Look at the known marks for our group 1 (there should be 3 undeleted marks).
---
select * from emaj.emaj_mark where mark_group = 'emaj demo group 1';
---
--- Count the total number of logged updates.
---
select sum(stat_rows) from emaj.emaj_log_stat_group('emaj demo group 1','MARK1',NULL);
---------------------------------------------------------------------------
---                                                                     ---
---  Let us rollback "emaj demo group 1" tables group to MARK2.         ---
---                                                                     ---
---------------------------------------------------------------------------
---
--- (unlogged) rollback to MARK2.
---
select * from emaj.emaj_rollback_group('emaj demo group 1','MARK2');
psql:sql/emaj_demo.sql:268: ERROR:  syntax error at or near "INTO"
LINE 65:             INTO v_connectString;
                     ^
QUERY:  
-- This function tries to open a named dblink connection.
-- It uses as target: the current cluster (port), the current database and a role defined in the emaj_param table.
-- This connection role must be defined in the emaj_param table with a row having:
--   - param_key = 'dblink_user_password',
--   - param_value_text = 'user=<user> password=<password>' with the rules that apply to usual libPQ connect strings.
-- The password can be omited if the connection doesn't require it.
-- The dblink_connect_u is used to open the connection so that emaj_adm but non superuser roles can access the
--    cluster even when no password is required to log on.
-- The function is directly called by Emaj_web.
-- Input:  connection name
-- Output: integer status return.
--           1 successful connection
--           0 already opened connection
--          -1 dblink is not installed
--          -2 dblink functions are not visible for the session (obsolete)
--          -3 dblink functions execution is not granted to the role
--          -4 the transaction isolation level is not READ COMMITTED
--          -5 no 'dblink_user_password' parameter is defined in the emaj_param table
--          -6 error at dblink_connect() call
--         name of the schema that holds the dblink extension (used later to schema qualify all calls to dblink functions)
  DECLARE
    v_nbCnx                  INT;
    v_UserPassword           TEXT;
    v_connectString          TEXT;
  BEGIN
-- Look for the schema holding the dblink functions.
--   (NULL if the dblink_connect_u function is not available, which should not happen)
    SELECT nspname INTO p_schema
      FROM pg_catalog.pg_proc
           JOIN pg_catalog.pg_namespace ON (pg_namespace.oid = pronamespace)
      WHERE proname = 'dblink_connect_u'
      LIMIT 1;
    IF NOT FOUND THEN
      p_status = -1;                      -- dblink is not installed
    ELSIF NOT has_function_privilege(quote_ident(p_schema) || '.dblink_connect_u(text, text)', 'execute') THEN
      p_status = -3;                      -- current role has not the execute rights on dblink functions
    ELSIF (p_cnxName LIKE 'rlbk#%' OR p_cnxName = 'test') AND
          current_setting('transaction_isolation') <> 'read committed' THEN
      p_status = -4;                      -- 'rlbk#*' connection (used for rollbacks) must only come from a
                                          --   READ COMMITTED transaction
    ELSE
      EXECUTE format('SELECT 0 WHERE %L = ANY (%I.dblink_get_connections())',
                     p_cnxName, p_schema);
      GET DIAGNOSTICS v_nbCnx = ROW_COUNT;
      IF v_nbCnx > 0 THEN
-- Dblink is usable, so search the requested connection name in dblink connections list.
        p_status = 0;                       -- the requested connection is already open
      ELSE
-- So, get the 'dblink_user_password' parameter if exists, from emaj_param.
        SELECT param_value_text INTO v_UserPassword
          FROM emaj.emaj_param
          WHERE param_key = 'dblink_user_password';
        IF NOT FOUND THEN
          p_status = -5;                    -- no 'dblink_user_password' parameter is defined in the emaj_param table
        ELSE
-- ... build the connect string
          SELECT 'host=' || CASE WHEN current_setting('listen_addresses') = ''
                              THEN '"' || current_setting('unix_socket_directory') || '"'
                              ELSE 'localhost'
                            END
              || ' port=' || current_setting('port')
              || ' dbname=' || current_database()
              || ' ' || v_userPassword;
            INTO v_connectString;
-- ... and try to connect
          BEGIN
            EXECUTE format('SELECT %I.dblink_connect_u(%L ,%L)',
                           p_schema, p_cnxName, v_connectString);
            p_status = 1;                   -- the connection is successful
          EXCEPTION
            WHEN OTHERS THEN
              p_status = -6;                -- the connection attempt failed
          END;
        END IF;
      END IF;
    END IF;
-- For connections used for rollback operations, record the dblink connection attempt in the emaj_hist table.
    IF substring(p_cnxName FROM 1 FOR 5) = 'rlbk#' THEN
      INSERT INTO emaj.emaj_hist (hist_function, hist_object, hist_wording)
        VALUES ('DBLINK_OPEN_CNX', p_cnxName, 'Status = ' || p_status);
    END IF;
--
    RETURN;
  END;

CONTEXT:  compilation of PL/pgSQL function "_dblink_open_cnx" near line 58
SQL statement "SELECT p_status, (p_status >= 0), CASE WHEN p_status >= 0 THEN p_schema ELSE NULL END
                                                                       FROM emaj._dblink_open_cnx('rlbk#1')"
PL/pgSQL function emaj._rlbk_init(text[],text,boolean,integer,boolean,boolean,text) line 49 at SQL statement
SQL statement "SELECT emaj._rlbk_init(p_groupNames, p_mark, p_isLoggedRlbk, 1, p_multiGroup, p_isAlterGroupAllowed, p_comment)"
PL/pgSQL function emaj._rlbk_groups(text[],text,boolean,boolean,boolean,text) line 26 at SQL statement
PL/pgSQL function emaj.emaj_rollback_group(text,text,boolean,text) line 8 at RETURN QUERY
---------------------------------------------------------------------------
---                                                                     ---
---     Setting up an environment to test E-Maj parallel rollbacks      ---
---                                                                     ---
---------------------------------------------------------------------------
---
--- Check the E-Maj environment.
---
---
--- Create the emaj.emaj_parallel_rollback_test_cleanup() function to use later in order to remove objects created by this script.
---
---
--- Create an application schema and tables for the test
---
DROP SCHEMA IF EXISTS emaj_parallel_rollback_test_app_schema CASCADE;
CREATE SCHEMA emaj_parallel_rollback_test_app_schema;
SET search_path=emaj_parallel_rollback_test_app_schema;
DROP TABLE IF EXISTS myTbl1 ;
CREATE TABLE myTbl1 (
  col11       DECIMAL (7)      NOT NULL,
  col12       CHAR (10)        NOT NULL,
  col13       BYTEA            ,
  PRIMARY KEY (col11,col12)
);
DROP TABLE IF EXISTS myTbl2 ;
CREATE TABLE myTbl2 (
  col21       INT              NOT NULL,
  col22       TEXT             ,
  col23       DATE             ,
  PRIMARY KEY (col21)
);
DROP TABLE IF EXISTS "myTbl3" ;
CREATE TABLE "myTbl3" (
  col31       SERIAL           NOT NULL,
  col32       TIMESTAMP        DEFAULT now(),
  col33       DECIMAL (12,2)   ,
  PRIMARY KEY (col31)
);
CREATE INDEX myIdx3 ON "myTbl3" (col32,col33);
DROP TABLE IF EXISTS myTbl4 ;
CREATE TABLE myTbl4 (
  col41       INT              NOT NULL,
  col42       TEXT             ,
  col43       INT              ,
  col44       DECIMAL(7)       ,
  col45       CHAR(10)         ,
  PRIMARY KEY (col41),
  FOREIGN KEY (col43) REFERENCES myTbl2 (col21),
  FOREIGN KEY (col44,col45) REFERENCES myTbl1 (col11,col12) ON DELETE CASCADE
);
DROP TABLE IF EXISTS myTbl2b ;
CREATE TABLE myTbl2b (
  col20       SERIAL           NOT NULL,
  col21       INT              NOT NULL,
  PRIMARY KEY (col20)
);
CREATE or REPLACE FUNCTION myTbl2trgfct () RETURNS trigger AS $$
BEGIN
  IF (TG_OP = 'DELETE') THEN
    INSERT INTO myTbl2b (col21) SELECT OLD.col21;
    RETURN OLD;
  ELSIF (TG_OP = 'UPDATE') THEN
    INSERT INTO myTbl2b (col21) SELECT NEW.col21;
    RETURN NEW;
  ELSIF (TG_OP = 'INSERT') THEN
    INSERT INTO myTbl2b (col21) SELECT NEW.col21;
    RETURN NEW;
  END IF;
  RETURN NULL;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;
CREATE TRIGGER myTbl2trg
  AFTER INSERT OR UPDATE OR DELETE ON myTbl2
  FOR EACH ROW EXECUTE PROCEDURE myTbl2trgfct ();
---
--- Create E-Maj objects
---
SELECT emaj.emaj_create_group('emaj parallel rollback test group');
---
--- Now the E-Maj administrator populates the tables groups
---
SELECT emaj.emaj_assign_table('emaj_parallel_rollback_test_app_schema', 'mytbl1', 'emaj parallel rollback test group');
SELECT emaj.emaj_assign_table('emaj_parallel_rollback_test_app_schema', 'mytbl2', 'emaj parallel rollback test group');
psql:sql/emaj_prepare_parallel_rollback_test.sql:173: WARNING:  _create_tbl: The table "emaj_parallel_rollback_test_app_schema.mytbl2" has triggers that will be automatically disabled during E-Maj rollback operations (mytbl2trg). Use the emaj_modify_table() function to change this behaviour.
SELECT emaj.emaj_assign_table('emaj_parallel_rollback_test_app_schema', 'myTbl3', 'emaj parallel rollback test group');
SELECT emaj.emaj_assign_table('emaj_parallel_rollback_test_app_schema', 'mytbl2b', 'emaj parallel rollback test group');
SELECT emaj.emaj_assign_table('emaj_parallel_rollback_test_app_schema', 'mytbl4', 'emaj parallel rollback test group');
SELECT emaj.emaj_assign_sequence('emaj_parallel_rollback_test_app_schema', 'myTbl3_col31_seq', 'emaj parallel rollback test group');
---
--- Log triggers activation and setting of a BEFORE_PROC_1 mark
---
SELECT emaj.emaj_start_group('emaj parallel rollback test group','BEFORE_PROC_1');
---
--- Simulate the update activity of a first processing
---
INSERT INTO myTbl1 VALUES (1,'ABC',E'\014'::bytea);
INSERT INTO myTbl1 VALUES (1,'DEF',E'\014'::bytea);
INSERT INTO myTbl2 VALUES (1,'ABC',current_date);
INSERT INTO myTbl2 VALUES (2,'DEF',NULL);
INSERT INTO myTbl4 VALUES (1,'FK...',1,1,'ABC');
UPDATE myTbl1 SET col13=E'\034'::bytea WHERE col12='ABC';
UPDATE myTbl1 SET col13=NULL WHERE col12='DEF';
INSERT INTO "myTbl3" (col33) SELECT generate_series (1,10)*random();
---
--- Application tables at the end of this first processing
---
SELECT * FROM myTbl1;
SELECT * FROM myTbl2;
SELECT * FROM "myTbl3";
SELECT * FROM myTbl2b;
SELECT * FROM "myTbl3_col31_seq";
---
--- Set a BEFORE_PROC_2 mark
---
SELECT emaj.emaj_set_mark_group('emaj parallel rollback test group','BEFORE_PROC_2');
---
--- Simulate the update activity of a second processing, including a sequence change
---
ALTER SEQUENCE "myTbl3_col31_seq" INCREMENT 3 MAXVALUE 10000000;
INSERT INTO myTbl1 VALUES (1,'GHI',E'\014'::bytea);
INSERT INTO myTbl1 VALUES (1,'JKL',E'\014'::bytea);
DELETE FROM myTbl1 WHERE col12 = 'DEF';
INSERT INTO myTbl2 VALUES (3,'GHI','01/01/2009');
UPDATE "myTbl3" SET col33 = 0 WHERE col31 = 1;
INSERT INTO "myTbl3" (col33) VALUES (3);
---
--- Set a BEFORE_PROC_3 mark
---
SELECT emaj.emaj_set_mark_group('emaj parallel rollback test group','BEFORE_PROC_3');
---
--- Simulate the update activity of a third processing
---
INSERT INTO myTbl1 VALUES (1,'MNO',E'\014'::bytea);
INSERT INTO myTbl1 VALUES (1,'PQR',E'\014'::bytea);
INSERT INTO "myTbl3" (col33) VALUES (4);
DELETE FROM "myTbl3";
---
--- deactivate trigger on mytbl2
---
ALTER TABLE mytbl2 DISABLE TRIGGER mytbl2trg;
RESET search_path;
---
--- emaj_prepare_parallel_rollback_test.sql script successfuly completed.
--- A parallel rollback can be performed, using a command like:
--- emajParallelRollback.pl -g 'emaj parallel rollback test group' -m BEFORE_PROC_2 -s 3 -v <and any needed connection parameters among -dhpUW>
--- emajParallelRollback.pl --help" provides information about available parameters.
---
-- Direct emaj extension drop attempt
drop extension emaj cascade;
ERROR:  E-Maj event trigger: Attempting to drop the emaj extension. Please execute the emaj.emaj_drop_extension() function if you really want to remove all E-Maj components.
CONTEXT:  PL/pgSQL function _emaj_protection_event_trigger_fnct() line 22 at RAISE
-- Direct emaj schema drop attempt
drop schema emaj cascade;
ERROR:  E-Maj event trigger: Attempting to drop the schema "emaj". Please execute the emaj.emaj_drop_extension() function if you really want to remove all E-Maj components.
CONTEXT:  PL/pgSQL function _emaj_protection_event_trigger_fnct() line 17 at RAISE
-- Look at the tables groups
select group_name from emaj.emaj_group order by group_name;
            group_name             
-----------------------------------
 emaj demo group 1
 emaj demo group 2
 emaj parallel rollback test group
(3 rows)

-- Look at the public and cleanup functions
\df public._emaj*
                                      List of functions
 Schema |                Name                 | Result data type | Argument data types | Type 
--------+-------------------------------------+------------------+---------------------+------
 public | _emaj_protection_event_trigger_fnct | event_trigger    |                     | func
(1 row)

\df emaj.emaj_*_cleanup*
                                      List of functions
 Schema |                Name                 | Result data type | Argument data types | Type 
--------+-------------------------------------+------------------+---------------------+------
 emaj   | emaj_demo_cleanup                   | text             |                     | func
 emaj   | emaj_parallel_rollback_test_cleanup | text             |                     | func
(2 rows)

