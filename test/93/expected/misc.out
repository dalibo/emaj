-- misc.sql : test miscellaneous functions
--
-- set sequence restart value
alter sequence emaj.emaj_hist_hist_id_seq restart 5000;
alter sequence emaj.emaj_time_stamp_time_id_seq restart 5000;
alter sequence emaj.emaj_mark_mark_id_seq restart 5000;
alter sequence emaj.emaj_rlbk_rlbk_id_seq restart 5000;
-----------------------------
-- emaj_reset_group() test
-----------------------------
-- group is unknown in emaj_group_def
select emaj.emaj_reset_group(NULL);
ERROR:  _check_group_names: No group to process.
CONTEXT:  SQL statement "SELECT emaj._check_group_names(v_groupNames := ARRAY[v_groupName], v_mayBeNull := FALSE, v_lockGroups := TRUE, v_checkList := 'IDLE')"
PL/pgSQL function emaj.emaj_reset_group(text) line 15 at PERFORM
select emaj.emaj_reset_group('unknownGroup');
ERROR:  _check_group_names: The group "unknownGroup" does not exist.
CONTEXT:  SQL statement "SELECT emaj._check_group_names(v_groupNames := ARRAY[v_groupName], v_mayBeNull := FALSE, v_lockGroups := TRUE, v_checkList := 'IDLE')"
PL/pgSQL function emaj.emaj_reset_group(text) line 15 at PERFORM
-- group not in logging state
select emaj.emaj_reset_group('myGroup1');
ERROR:  _check_group_names: The group "myGroup1" is not in IDLE state.
CONTEXT:  SQL statement "SELECT emaj._check_group_names(v_groupNames := ARRAY[v_groupName], v_mayBeNull := FALSE, v_lockGroups := TRUE, v_checkList := 'IDLE')"
PL/pgSQL function emaj.emaj_reset_group(text) line 15 at PERFORM
-- stop group
select emaj.emaj_stop_group('myGroup1');
 emaj_stop_group 
-----------------
               7
(1 row)

-- log tables are not yet empty
select count(*) from emaj.myschema1_mytbl1_log;
 count 
-------
    18
(1 row)

select count(*) from emaj.myschema1_mytbl2_log;
 count 
-------
     2
(1 row)

select count(*) from emajb.myschema1_mytbl2b_log;
 count 
-------
     2
(1 row)

select count(*) from "emajC"."myschema1_myTbl3_log";
 count 
-------
    10
(1 row)

select count(*) from emaj.myschema1_mytbl4_log;
 count 
-------
     1
(1 row)

-- should be OK
select emaj.emaj_reset_group('myGroup1');
 emaj_reset_group 
------------------
                7
(1 row)

begin;
  select emaj.emaj_stop_group('emptyGroup');
 emaj_stop_group 
-----------------
               0
(1 row)

  select emaj.emaj_reset_group('emptyGroup');
 emaj_reset_group 
------------------
                0
(1 row)

rollback;
select count(*) from emaj.myschema1_mytbl1_log;
 count 
-------
     0
(1 row)

select count(*) from emaj.myschema1_mytbl2_log;
 count 
-------
     0
(1 row)

select count(*) from emajb.myschema1_mytbl2b_log;
 count 
-------
     0
(1 row)

select count(*) from "emajC"."myschema1_myTbl3_log";
 count 
-------
     0
(1 row)

select count(*) from emaj.myschema1_mytbl4_log;
 count 
-------
     0
(1 row)

-- test the "no initial mark" error message for the emaj_gen_sql_group()
--   this test has been moved here because, the emaj_reset_group() function cannot be used into a transaction
select emaj.emaj_gen_sql_group('myGroup1', NULL, NULL, NULL);
WARNING:  _gen_sql_groups: No mark exists for the group(s) "myGroup1".
CONTEXT:  PL/pgSQL function emaj.emaj_gen_sql_group(text,text,text,text,text[]) line 13 at RETURN
 emaj_gen_sql_group 
--------------------
                  0
(1 row)

-- start myGroup1
select emaj.emaj_start_group('myGroup1','Mark21');
 emaj_start_group 
------------------
                7
(1 row)

-----------------------------
-- log updates on myschema2 between 3 mono-group and multi-groups marks 
-----------------------------
set search_path=public,myschema2;
-- set a multi-groups mark
select emaj.emaj_set_mark_groups(array['myGroup1','myGroup2'],'Multi-1');
 emaj_set_mark_groups 
----------------------
                   15
(1 row)

-- inserts/updates/deletes in myTbl1, myTbl2 and myTbl2b (via trigger)
insert into myTbl1 select i, 'ABC', E'\\014'::bytea from generate_series (1,10100) as i;
update myTbl1 set col13=E'\\034'::bytea where col11 <= 500;
delete from myTbl1 where col11 > 10000;
insert into myTbl2 select i, 'DEF', current_date from generate_series (1,900) as i;
-- set marks
select emaj.emaj_set_mark_group('myGroup2','Mark22');
 emaj_set_mark_group 
---------------------
                   8
(1 row)

select emaj.emaj_set_mark_groups(array['myGroup1','myGroup2'],'Multi-2');
 emaj_set_mark_groups 
----------------------
                   15
(1 row)

-- inserts/updates/deletes in myTbl3 and myTbl4
insert into "myTbl3" (col33) select generate_series(1000,1039,4)/100;
insert into myTbl4 select i,'FK...',i,1,'ABC' from generate_series (1,100) as i;
-- set marks
select emaj.emaj_set_mark_group('myGroup2','Mark23');
 emaj_set_mark_group 
---------------------
                   8
(1 row)

select emaj.emaj_set_mark_groups(array['myGroup1','myGroup2'],'Multi-3');
 emaj_set_mark_groups 
----------------------
                   15
(1 row)

-----------------------------
-- emaj_log_stat_group(), emaj_log_stat_groups(), emaj_detailled_log_stat_group() and emaj_detailled_log_stat_groups() test
-----------------------------
-- group is unknown in emaj_group_def
select * from emaj.emaj_log_stat_group(NULL,NULL,NULL);
ERROR:  _check_group_names: No group to process.
CONTEXT:  SQL statement "SELECT emaj._check_group_names(v_groupNames := v_groupNames, v_mayBeNull := v_multiGroup, v_lockGroups := FALSE, v_checkList := '')"
PL/pgSQL function emaj._log_stat_groups(text[],boolean,text,text) line 17 at SQL statement
PL/pgSQL function emaj.emaj_log_stat_group(text,text,text) line 7 at RETURN QUERY
select * from emaj.emaj_log_stat_groups(array['unknownGroup'],NULL,NULL);
ERROR:  _check_group_names: The group "unknownGroup" does not exist.
CONTEXT:  SQL statement "SELECT emaj._check_group_names(v_groupNames := v_groupNames, v_mayBeNull := v_multiGroup, v_lockGroups := FALSE, v_checkList := '')"
PL/pgSQL function emaj._log_stat_groups(text[],boolean,text,text) line 17 at SQL statement
PL/pgSQL function emaj.emaj_log_stat_groups(text[],text,text) line 7 at RETURN QUERY
select * from emaj.emaj_detailed_log_stat_group(NULL,NULL,NULL);
ERROR:  _check_group_names: No group to process.
CONTEXT:  SQL statement "SELECT emaj._check_group_names(v_groupNames := v_groupNames, v_mayBeNull := v_multiGroup, v_lockGroups := FALSE, v_checkList := '')"
PL/pgSQL function emaj._detailed_log_stat_groups(text[],boolean,text,text) line 28 at PERFORM
PL/pgSQL function emaj.emaj_detailed_log_stat_group(text,text,text) line 8 at RETURN QUERY
select * from emaj.emaj_detailed_log_stat_groups(array['unknownGroup'],NULL,NULL);
ERROR:  _check_group_names: The group "unknownGroup" does not exist.
CONTEXT:  SQL statement "SELECT emaj._check_group_names(v_groupNames := v_groupNames, v_mayBeNull := v_multiGroup, v_lockGroups := FALSE, v_checkList := '')"
PL/pgSQL function emaj._detailed_log_stat_groups(text[],boolean,text,text) line 28 at PERFORM
PL/pgSQL function emaj.emaj_detailed_log_stat_groups(text[],text,text) line 8 at RETURN QUERY
-- invalid marks
select * from emaj.emaj_log_stat_group('myGroup2','dummyStartMark',NULL);
ERROR:  _check_mark_name: The mark "dummyStartMark" does not exist for the group "myGroup2".
CONTEXT:  SQL statement "SELECT emaj._check_mark_name (v_groupNames := v_groupNames, v_mark := v_firstMark, v_checkList := '')"
PL/pgSQL function emaj._check_marks_range(text[],text,text) line 56 at SQL statement
SQL statement "SELECT * FROM emaj._check_marks_range(v_groupNames, v_firstMark, v_lastMark)"
PL/pgSQL function emaj._log_stat_groups(text[],boolean,text,text) line 20 at SQL statement
PL/pgSQL function emaj.emaj_log_stat_group(text,text,text) line 7 at RETURN QUERY
select * from emaj.emaj_log_stat_group('myGroup2',NULL,'dummyEndMark');
ERROR:  _check_mark_name: The mark "dummyEndMark" does not exist for the group "myGroup2".
CONTEXT:  SQL statement "SELECT emaj._check_mark_name (v_groupNames := v_groupNames, v_mark := v_lastMark, v_checkList := '')"
PL/pgSQL function emaj._check_marks_range(text[],text,text) line 65 at SQL statement
SQL statement "SELECT * FROM emaj._check_marks_range(v_groupNames, v_firstMark, v_lastMark)"
PL/pgSQL function emaj._log_stat_groups(text[],boolean,text,text) line 20 at SQL statement
PL/pgSQL function emaj.emaj_log_stat_group(text,text,text) line 7 at RETURN QUERY
select * from emaj.emaj_detailed_log_stat_group('myGroup2','dummyStartMark',NULL);
ERROR:  _check_mark_name: The mark "dummyStartMark" does not exist for the group "myGroup2".
CONTEXT:  SQL statement "SELECT emaj._check_mark_name (v_groupNames := v_groupNames, v_mark := v_firstMark, v_checkList := '')"
PL/pgSQL function emaj._check_marks_range(text[],text,text) line 56 at SQL statement
SQL statement "SELECT * FROM emaj._check_marks_range(v_groupNames, v_firstMark, v_lastMark)"
PL/pgSQL function emaj._detailed_log_stat_groups(text[],boolean,text,text) line 31 at SQL statement
PL/pgSQL function emaj.emaj_detailed_log_stat_group(text,text,text) line 8 at RETURN QUERY
select * from emaj.emaj_detailed_log_stat_group('myGroup2',NULL,'dummyEndMark');
ERROR:  _check_mark_name: The mark "dummyEndMark" does not exist for the group "myGroup2".
CONTEXT:  SQL statement "SELECT emaj._check_mark_name (v_groupNames := v_groupNames, v_mark := v_lastMark, v_checkList := '')"
PL/pgSQL function emaj._check_marks_range(text[],text,text) line 65 at SQL statement
SQL statement "SELECT * FROM emaj._check_marks_range(v_groupNames, v_firstMark, v_lastMark)"
PL/pgSQL function emaj._detailed_log_stat_groups(text[],boolean,text,text) line 31 at SQL statement
PL/pgSQL function emaj.emaj_detailed_log_stat_group(text,text,text) line 8 at RETURN QUERY
select * from emaj.emaj_log_stat_groups(array['myGroup1','myGroup2'],NULL,NULL);
ERROR:  _check_marks_range: The oldest marks of each group do not represent the same point in time.
CONTEXT:  SQL statement "SELECT * FROM emaj._check_marks_range(v_groupNames, v_firstMark, v_lastMark)"
PL/pgSQL function emaj._log_stat_groups(text[],boolean,text,text) line 20 at SQL statement
PL/pgSQL function emaj.emaj_log_stat_groups(text[],text,text) line 7 at RETURN QUERY
select * from emaj.emaj_log_stat_groups(array['myGroup1','myGroup2'],'Multi-1','dummyEndMark');
ERROR:  _check_mark_name: The mark "dummyEndMark" does not exist for the groups "myGroup1, myGroup2".
CONTEXT:  SQL statement "SELECT emaj._check_mark_name (v_groupNames := v_groupNames, v_mark := v_lastMark, v_checkList := '')"
PL/pgSQL function emaj._check_marks_range(text[],text,text) line 65 at SQL statement
SQL statement "SELECT * FROM emaj._check_marks_range(v_groupNames, v_firstMark, v_lastMark)"
PL/pgSQL function emaj._log_stat_groups(text[],boolean,text,text) line 20 at SQL statement
PL/pgSQL function emaj.emaj_log_stat_groups(text[],text,text) line 7 at RETURN QUERY
select * from emaj.emaj_detailed_log_stat_groups(array['myGroup1','myGroup2'],NULL,NULL);
ERROR:  _check_marks_range: The oldest marks of each group do not represent the same point in time.
CONTEXT:  SQL statement "SELECT * FROM emaj._check_marks_range(v_groupNames, v_firstMark, v_lastMark)"
PL/pgSQL function emaj._detailed_log_stat_groups(text[],boolean,text,text) line 31 at SQL statement
PL/pgSQL function emaj.emaj_detailed_log_stat_groups(text[],text,text) line 8 at RETURN QUERY
select * from emaj.emaj_detailed_log_stat_groups(array['myGroup1','myGroup2'],'Multi-1','dummyEndMark');
ERROR:  _check_mark_name: The mark "dummyEndMark" does not exist for the groups "myGroup1, myGroup2".
CONTEXT:  SQL statement "SELECT emaj._check_mark_name (v_groupNames := v_groupNames, v_mark := v_lastMark, v_checkList := '')"
PL/pgSQL function emaj._check_marks_range(text[],text,text) line 65 at SQL statement
SQL statement "SELECT * FROM emaj._check_marks_range(v_groupNames, v_firstMark, v_lastMark)"
PL/pgSQL function emaj._detailed_log_stat_groups(text[],boolean,text,text) line 31 at SQL statement
PL/pgSQL function emaj.emaj_detailed_log_stat_groups(text[],text,text) line 8 at RETURN QUERY
-- start mark > end mark
-- original test (uncomment for unit test)
--  select * from emaj.emaj_log_stat_group('myGroup2','Mark23','Mark22');
--  select * from emaj.emaj_detailed_log_stat_group('myGroup2','Mark23','Mark22');
-- just check the error is trapped, because the error message contains timestamps
create function test_log(v_groupName TEXT, v_firstMark TEXT, v_lastMark TEXT) returns void language plpgsql as 
$$
begin
  begin
    perform count(*) from emaj.emaj_log_stat_group(v_groupName,v_firstMark,v_lastMark);
    return;
  exception when raise_exception then
    raise notice 'Error trapped on emaj_log_stat_group() call';
  end;
  begin
    perform count(*) from emaj.emaj_detailed_log_stat_group(v_groupName,v_firstMark,v_lastMark);
    return;
  exception when raise_exception then
    raise notice 'Error trapped on emaj_detailed_log_stat_group() call';
  end;
  return;
end;
$$;
select test_log('myGroup2','Mark23','Mark22');
NOTICE:  Error trapped on emaj_log_stat_group() call
NOTICE:  Error trapped on emaj_detailed_log_stat_group() call
 test_log 
----------
 
(1 row)

select test_log('myGroup2','EMAJ_LAST_MARK','Mark22');
NOTICE:  Error trapped on emaj_log_stat_group() call
NOTICE:  Error trapped on emaj_detailed_log_stat_group() call
 test_log 
----------
 
(1 row)

drop function test_log(text,text,text);
-- should be ok
select stat_group, stat_schema, stat_table, stat_first_mark, stat_last_mark, stat_rows from emaj.emaj_log_stat_group('myGroup2',NULL,NULL)
  order by stat_group, stat_schema, stat_table;
 stat_group | stat_schema | stat_table | stat_first_mark | stat_last_mark | stat_rows 
------------+-------------+------------+-----------------+----------------+-----------
 myGroup2   | myschema2   | mytbl1     | Mark21          |                |     10700
 myGroup2   | myschema2   | mytbl2     | Mark21          |                |       900
 myGroup2   | myschema2   | myTbl3     | Mark21          |                |        10
 myGroup2   | myschema2   | mytbl4     | Mark21          |                |       100
 myGroup2   | myschema2   | mytbl5     | Mark21          |                |         0
 myGroup2   | myschema2   | mytbl6     | Mark21          |                |         0
(6 rows)

select stat_group, stat_schema, stat_table, stat_first_mark, stat_last_mark, stat_rows from emaj.emaj_log_stat_group('myGroup2','','')
  order by stat_group, stat_schema, stat_table;
 stat_group | stat_schema | stat_table | stat_first_mark | stat_last_mark | stat_rows 
------------+-------------+------------+-----------------+----------------+-----------
 myGroup2   | myschema2   | mytbl1     | Mark21          |                |     10700
 myGroup2   | myschema2   | mytbl2     | Mark21          |                |       900
 myGroup2   | myschema2   | myTbl3     | Mark21          |                |        10
 myGroup2   | myschema2   | mytbl4     | Mark21          |                |       100
 myGroup2   | myschema2   | mytbl5     | Mark21          |                |         0
 myGroup2   | myschema2   | mytbl6     | Mark21          |                |         0
(6 rows)

select stat_group, stat_schema, stat_table, stat_first_mark, stat_last_mark, stat_rows from emaj.emaj_log_stat_group('myGroup2','Mark21',NULL)
  order by stat_group, stat_schema, stat_table;
 stat_group | stat_schema | stat_table | stat_first_mark | stat_last_mark | stat_rows 
------------+-------------+------------+-----------------+----------------+-----------
 myGroup2   | myschema2   | mytbl1     | Mark21          |                |     10700
 myGroup2   | myschema2   | mytbl2     | Mark21          |                |       900
 myGroup2   | myschema2   | myTbl3     | Mark21          |                |        10
 myGroup2   | myschema2   | mytbl4     | Mark21          |                |       100
 myGroup2   | myschema2   | mytbl5     | Mark21          |                |         0
 myGroup2   | myschema2   | mytbl6     | Mark21          |                |         0
(6 rows)

select stat_group, stat_schema, stat_table, stat_first_mark, stat_last_mark, stat_rows from emaj.emaj_log_stat_group('myGroup2','Mark21','EMAJ_LAST_MARK')
  order by stat_group, stat_schema, stat_table;
 stat_group | stat_schema | stat_table | stat_first_mark | stat_last_mark | stat_rows 
------------+-------------+------------+-----------------+----------------+-----------
 myGroup2   | myschema2   | mytbl1     | Mark21          | Multi-3        |     10700
 myGroup2   | myschema2   | mytbl2     | Mark21          | Multi-3        |       900
 myGroup2   | myschema2   | myTbl3     | Mark21          | Multi-3        |        10
 myGroup2   | myschema2   | mytbl4     | Mark21          | Multi-3        |       100
 myGroup2   | myschema2   | mytbl5     | Mark21          | Multi-3        |         0
 myGroup2   | myschema2   | mytbl6     | Mark21          | Multi-3        |         0
(6 rows)

select stat_group, stat_schema, stat_table, stat_first_mark, stat_last_mark, stat_rows from emaj.emaj_log_stat_group('myGroup2',NULL,'Mark22')
  order by stat_group, stat_schema, stat_table;
 stat_group | stat_schema | stat_table | stat_first_mark | stat_last_mark | stat_rows 
------------+-------------+------------+-----------------+----------------+-----------
 myGroup2   | myschema2   | mytbl1     | Mark21          | Mark22         |     10700
 myGroup2   | myschema2   | mytbl2     | Mark21          | Mark22         |       900
 myGroup2   | myschema2   | myTbl3     | Mark21          | Mark22         |         0
 myGroup2   | myschema2   | mytbl4     | Mark21          | Mark22         |         0
 myGroup2   | myschema2   | mytbl5     | Mark21          | Mark22         |         0
 myGroup2   | myschema2   | mytbl6     | Mark21          | Mark22         |         0
(6 rows)

select stat_group, stat_schema, stat_table, stat_first_mark, stat_last_mark, stat_rows from emaj.emaj_log_stat_group('myGroup2','Mark22','Mark22')
  order by stat_group, stat_schema, stat_table;
 stat_group | stat_schema | stat_table | stat_first_mark | stat_last_mark | stat_rows 
------------+-------------+------------+-----------------+----------------+-----------
 myGroup2   | myschema2   | mytbl1     | Mark22          | Mark22         |         0
 myGroup2   | myschema2   | mytbl2     | Mark22          | Mark22         |         0
 myGroup2   | myschema2   | myTbl3     | Mark22          | Mark22         |         0
 myGroup2   | myschema2   | mytbl4     | Mark22          | Mark22         |         0
 myGroup2   | myschema2   | mytbl5     | Mark22          | Mark22         |         0
 myGroup2   | myschema2   | mytbl6     | Mark22          | Mark22         |         0
(6 rows)

select stat_group, stat_schema, stat_table, stat_first_mark, stat_last_mark, stat_rows from emaj.emaj_log_stat_group('myGroup2','Mark22','Mark23')
  order by stat_group, stat_schema, stat_table;
 stat_group | stat_schema | stat_table | stat_first_mark | stat_last_mark | stat_rows 
------------+-------------+------------+-----------------+----------------+-----------
 myGroup2   | myschema2   | mytbl1     | Mark22          | Mark23         |         0
 myGroup2   | myschema2   | mytbl2     | Mark22          | Mark23         |         0
 myGroup2   | myschema2   | myTbl3     | Mark22          | Mark23         |        10
 myGroup2   | myschema2   | mytbl4     | Mark22          | Mark23         |       100
 myGroup2   | myschema2   | mytbl5     | Mark22          | Mark23         |         0
 myGroup2   | myschema2   | mytbl6     | Mark22          | Mark23         |         0
(6 rows)

select stat_group, stat_schema, stat_table, stat_first_mark, stat_last_mark, stat_rows from emaj.emaj_log_stat_group('myGroup2','EMAJ_LAST_MARK','')
  order by stat_group, stat_schema, stat_table;
 stat_group | stat_schema | stat_table | stat_first_mark | stat_last_mark | stat_rows 
------------+-------------+------------+-----------------+----------------+-----------
 myGroup2   | myschema2   | mytbl1     | Multi-3         |                |         0
 myGroup2   | myschema2   | mytbl2     | Multi-3         |                |         0
 myGroup2   | myschema2   | myTbl3     | Multi-3         |                |         0
 myGroup2   | myschema2   | mytbl4     | Multi-3         |                |         0
 myGroup2   | myschema2   | mytbl5     | Multi-3         |                |         0
 myGroup2   | myschema2   | mytbl6     | Multi-3         |                |         0
(6 rows)

select stat_group, stat_schema, stat_table, stat_first_mark, stat_last_mark, stat_rows
  from emaj.emaj_log_stat_groups(array['myGroup1','myGroup2'],'Multi-1',NULL)
  order by stat_group, stat_schema, stat_table;
 stat_group | stat_schema | stat_table | stat_first_mark | stat_last_mark | stat_rows 
------------+-------------+------------+-----------------+----------------+-----------
 myGroup1   | myschema1   | mytbl1     | Multi-1         |                |         0
 myGroup1   | myschema1   | mytbl2     | Multi-1         |                |         0
 myGroup1   | myschema1   | mytbl2b    | Multi-1         |                |         0
 myGroup1   | myschema1   | myTbl3     | Multi-1         |                |         0
 myGroup1   | myschema1   | mytbl4     | Multi-1         |                |         0
 myGroup2   | myschema2   | mytbl1     | Multi-1         |                |     10700
 myGroup2   | myschema2   | mytbl2     | Multi-1         |                |       900
 myGroup2   | myschema2   | myTbl3     | Multi-1         |                |        10
 myGroup2   | myschema2   | mytbl4     | Multi-1         |                |       100
 myGroup2   | myschema2   | mytbl5     | Multi-1         |                |         0
 myGroup2   | myschema2   | mytbl6     | Multi-1         |                |         0
(11 rows)

select stat_group, stat_schema, stat_table, stat_first_mark, stat_last_mark, stat_rows
  from emaj.emaj_log_stat_groups(array['myGroup1','myGroup2'],'Multi-1','Multi-3')
  order by stat_group, stat_schema, stat_table;
 stat_group | stat_schema | stat_table | stat_first_mark | stat_last_mark | stat_rows 
------------+-------------+------------+-----------------+----------------+-----------
 myGroup1   | myschema1   | mytbl1     | Multi-1         | Multi-3        |         0
 myGroup1   | myschema1   | mytbl2     | Multi-1         | Multi-3        |         0
 myGroup1   | myschema1   | mytbl2b    | Multi-1         | Multi-3        |         0
 myGroup1   | myschema1   | myTbl3     | Multi-1         | Multi-3        |         0
 myGroup1   | myschema1   | mytbl4     | Multi-1         | Multi-3        |         0
 myGroup2   | myschema2   | mytbl1     | Multi-1         | Multi-3        |     10700
 myGroup2   | myschema2   | mytbl2     | Multi-1         | Multi-3        |       900
 myGroup2   | myschema2   | myTbl3     | Multi-1         | Multi-3        |        10
 myGroup2   | myschema2   | mytbl4     | Multi-1         | Multi-3        |       100
 myGroup2   | myschema2   | mytbl5     | Multi-1         | Multi-3        |         0
 myGroup2   | myschema2   | mytbl6     | Multi-1         | Multi-3        |         0
(11 rows)

select stat_group, stat_schema, stat_table, stat_first_mark, stat_last_mark, stat_role, stat_verb, stat_rows
  from emaj.emaj_detailed_log_stat_group('myGroup2',NULL,NULL)
  order by stat_group, stat_schema, stat_table;
 stat_group | stat_schema | stat_table | stat_first_mark | stat_last_mark | stat_role | stat_verb | stat_rows 
------------+-------------+------------+-----------------+----------------+-----------+-----------+-----------
 myGroup2   | myschema2   | mytbl1     | Mark21          |                | postgres  | DELETE    |       100
 myGroup2   | myschema2   | mytbl1     | Mark21          |                | postgres  | INSERT    |     10100
 myGroup2   | myschema2   | mytbl1     | Mark21          |                | postgres  | UPDATE    |       500
 myGroup2   | myschema2   | mytbl2     | Mark21          |                | postgres  | INSERT    |       900
 myGroup2   | myschema2   | myTbl3     | Mark21          |                | postgres  | INSERT    |        10
 myGroup2   | myschema2   | mytbl4     | Mark21          |                | postgres  | INSERT    |       100
(6 rows)

select stat_group, stat_schema, stat_table, stat_first_mark, stat_last_mark, stat_role, stat_verb, stat_rows
  from emaj.emaj_detailed_log_stat_group('myGroup2','','')
  order by stat_group, stat_schema, stat_table;
 stat_group | stat_schema | stat_table | stat_first_mark | stat_last_mark | stat_role | stat_verb | stat_rows 
------------+-------------+------------+-----------------+----------------+-----------+-----------+-----------
 myGroup2   | myschema2   | mytbl1     | Mark21          |                | postgres  | DELETE    |       100
 myGroup2   | myschema2   | mytbl1     | Mark21          |                | postgres  | INSERT    |     10100
 myGroup2   | myschema2   | mytbl1     | Mark21          |                | postgres  | UPDATE    |       500
 myGroup2   | myschema2   | mytbl2     | Mark21          |                | postgres  | INSERT    |       900
 myGroup2   | myschema2   | myTbl3     | Mark21          |                | postgres  | INSERT    |        10
 myGroup2   | myschema2   | mytbl4     | Mark21          |                | postgres  | INSERT    |       100
(6 rows)

select stat_group, stat_schema, stat_table, stat_first_mark, stat_last_mark, stat_role, stat_verb, stat_rows
  from emaj.emaj_detailed_log_stat_group('myGroup2','Mark21',NULL)
  order by stat_group, stat_schema, stat_table;
 stat_group | stat_schema | stat_table | stat_first_mark | stat_last_mark | stat_role | stat_verb | stat_rows 
------------+-------------+------------+-----------------+----------------+-----------+-----------+-----------
 myGroup2   | myschema2   | mytbl1     | Mark21          |                | postgres  | DELETE    |       100
 myGroup2   | myschema2   | mytbl1     | Mark21          |                | postgres  | INSERT    |     10100
 myGroup2   | myschema2   | mytbl1     | Mark21          |                | postgres  | UPDATE    |       500
 myGroup2   | myschema2   | mytbl2     | Mark21          |                | postgres  | INSERT    |       900
 myGroup2   | myschema2   | myTbl3     | Mark21          |                | postgres  | INSERT    |        10
 myGroup2   | myschema2   | mytbl4     | Mark21          |                | postgres  | INSERT    |       100
(6 rows)

select stat_group, stat_schema, stat_table, stat_first_mark, stat_last_mark, stat_role, stat_verb, stat_rows
  from emaj.emaj_detailed_log_stat_group('myGroup2','Mark21','EMAJ_LAST_MARK')
  order by stat_group, stat_schema, stat_table;
 stat_group | stat_schema | stat_table | stat_first_mark | stat_last_mark | stat_role | stat_verb | stat_rows 
------------+-------------+------------+-----------------+----------------+-----------+-----------+-----------
 myGroup2   | myschema2   | mytbl1     | Mark21          | Multi-3        | postgres  | DELETE    |       100
 myGroup2   | myschema2   | mytbl1     | Mark21          | Multi-3        | postgres  | INSERT    |     10100
 myGroup2   | myschema2   | mytbl1     | Mark21          | Multi-3        | postgres  | UPDATE    |       500
 myGroup2   | myschema2   | mytbl2     | Mark21          | Multi-3        | postgres  | INSERT    |       900
 myGroup2   | myschema2   | myTbl3     | Mark21          | Multi-3        | postgres  | INSERT    |        10
 myGroup2   | myschema2   | mytbl4     | Mark21          | Multi-3        | postgres  | INSERT    |       100
(6 rows)

select stat_group, stat_schema, stat_table, stat_first_mark, stat_last_mark, stat_role, stat_verb, stat_rows
  from emaj.emaj_detailed_log_stat_group('myGroup2',NULL,'Mark22')
  order by stat_group, stat_schema, stat_table;
 stat_group | stat_schema | stat_table | stat_first_mark | stat_last_mark | stat_role | stat_verb | stat_rows 
------------+-------------+------------+-----------------+----------------+-----------+-----------+-----------
 myGroup2   | myschema2   | mytbl1     | Mark21          | Mark22         | postgres  | DELETE    |       100
 myGroup2   | myschema2   | mytbl1     | Mark21          | Mark22         | postgres  | INSERT    |     10100
 myGroup2   | myschema2   | mytbl1     | Mark21          | Mark22         | postgres  | UPDATE    |       500
 myGroup2   | myschema2   | mytbl2     | Mark21          | Mark22         | postgres  | INSERT    |       900
(4 rows)

select stat_group, stat_schema, stat_table, stat_first_mark, stat_last_mark, stat_role, stat_verb, stat_rows
  from emaj.emaj_detailed_log_stat_group('myGroup2','Mark22','Mark22')
  order by stat_group, stat_schema, stat_table;
 stat_group | stat_schema | stat_table | stat_first_mark | stat_last_mark | stat_role | stat_verb | stat_rows 
------------+-------------+------------+-----------------+----------------+-----------+-----------+-----------
(0 rows)

select stat_group, stat_schema, stat_table, stat_first_mark, stat_last_mark, stat_role, stat_verb, stat_rows
  from emaj.emaj_detailed_log_stat_group('myGroup2','Mark22','Mark23')
  order by stat_group, stat_schema, stat_table;
 stat_group | stat_schema | stat_table | stat_first_mark | stat_last_mark | stat_role | stat_verb | stat_rows 
------------+-------------+------------+-----------------+----------------+-----------+-----------+-----------
 myGroup2   | myschema2   | myTbl3     | Mark22          | Mark23         | postgres  | INSERT    |        10
 myGroup2   | myschema2   | mytbl4     | Mark22          | Mark23         | postgres  | INSERT    |       100
(2 rows)

select stat_group, stat_schema, stat_table, stat_first_mark, stat_last_mark, stat_role, stat_verb, stat_rows
  from emaj.emaj_detailed_log_stat_group('myGroup2','EMAJ_LAST_MARK','')
  order by stat_group, stat_schema, stat_table;
 stat_group | stat_schema | stat_table | stat_first_mark | stat_last_mark | stat_role | stat_verb | stat_rows 
------------+-------------+------------+-----------------+----------------+-----------+-----------+-----------
(0 rows)

select stat_group, stat_schema, stat_table, stat_first_mark, stat_last_mark, stat_role, stat_verb, stat_rows
  from emaj.emaj_detailed_log_stat_groups(array['myGroup1','myGroup2'],'Multi-1',NULL)
  order by stat_group, stat_schema, stat_table;
 stat_group | stat_schema | stat_table | stat_first_mark | stat_last_mark | stat_role | stat_verb | stat_rows 
------------+-------------+------------+-----------------+----------------+-----------+-----------+-----------
 myGroup2   | myschema2   | mytbl1     | Multi-1         |                | postgres  | DELETE    |       100
 myGroup2   | myschema2   | mytbl1     | Multi-1         |                | postgres  | INSERT    |     10100
 myGroup2   | myschema2   | mytbl1     | Multi-1         |                | postgres  | UPDATE    |       500
 myGroup2   | myschema2   | mytbl2     | Multi-1         |                | postgres  | INSERT    |       900
 myGroup2   | myschema2   | myTbl3     | Multi-1         |                | postgres  | INSERT    |        10
 myGroup2   | myschema2   | mytbl4     | Multi-1         |                | postgres  | INSERT    |       100
(6 rows)

select stat_group, stat_schema, stat_table, stat_first_mark, stat_last_mark, stat_role, stat_verb, stat_rows
  from emaj.emaj_detailed_log_stat_groups(array['myGroup1','myGroup2'],'Multi-1','Multi-3')
  order by stat_group, stat_schema, stat_table;
 stat_group | stat_schema | stat_table | stat_first_mark | stat_last_mark | stat_role | stat_verb | stat_rows 
------------+-------------+------------+-----------------+----------------+-----------+-----------+-----------
 myGroup2   | myschema2   | mytbl1     | Multi-1         | Multi-3        | postgres  | DELETE    |       100
 myGroup2   | myschema2   | mytbl1     | Multi-1         | Multi-3        | postgres  | INSERT    |     10100
 myGroup2   | myschema2   | mytbl1     | Multi-1         | Multi-3        | postgres  | UPDATE    |       500
 myGroup2   | myschema2   | mytbl2     | Multi-1         | Multi-3        | postgres  | INSERT    |       900
 myGroup2   | myschema2   | myTbl3     | Multi-1         | Multi-3        | postgres  | INSERT    |        10
 myGroup2   | myschema2   | mytbl4     | Multi-1         | Multi-3        | postgres  | INSERT    |       100
(6 rows)

-- empty group
select * from emaj.emaj_log_stat_group('emptyGroup',NULL,NULL);
 stat_group | stat_schema | stat_table | stat_first_mark | stat_first_mark_datetime | stat_last_mark | stat_last_mark_datetime | stat_rows 
------------+-------------+------------+-----------------+--------------------------+----------------+-------------------------+-----------
(0 rows)

select * from emaj.emaj_detailed_log_stat_group('emptyGroup',NULL,NULL);
 stat_group | stat_schema | stat_table | stat_first_mark | stat_first_mark_datetime | stat_last_mark | stat_last_mark_datetime | stat_role | stat_verb | stat_rows 
------------+-------------+------------+-----------------+--------------------------+----------------+-------------------------+-----------+-----------+-----------
(0 rows)

-- groups without any mark
begin;
  select emaj.emaj_stop_group('myGroup1');
 emaj_stop_group 
-----------------
               7
(1 row)

  select emaj.emaj_reset_group('myGroup1');
 emaj_reset_group 
------------------
                7
(1 row)

  select * from emaj.emaj_log_stat_groups(array['myGroup1'],NULL,NULL);
 stat_group | stat_schema | stat_table | stat_first_mark | stat_first_mark_datetime | stat_last_mark | stat_last_mark_datetime | stat_rows 
------------+-------------+------------+-----------------+--------------------------+----------------+-------------------------+-----------
 myGroup1   | myschema1   | mytbl1     |                 |                          |                |                         |         0
 myGroup1   | myschema1   | mytbl2     |                 |                          |                |                         |         0
 myGroup1   | myschema1   | mytbl2b    |                 |                          |                |                         |         0
 myGroup1   | myschema1   | myTbl3     |                 |                          |                |                         |         0
 myGroup1   | myschema1   | mytbl4     |                 |                          |                |                         |         0
(5 rows)

  select * from emaj.emaj_detailed_log_stat_groups(array['myGroup1'],NULL,NULL);
 stat_group | stat_schema | stat_table | stat_first_mark | stat_first_mark_datetime | stat_last_mark | stat_last_mark_datetime | stat_role | stat_verb | stat_rows 
------------+-------------+------------+-----------------+--------------------------+----------------+-------------------------+-----------+-----------+-----------
(0 rows)

rollback;
-----------------------------
-- emaj_estimate_rollback_group() and emaj_estimate_rollback_groups() tests
-----------------------------
-- group is unknown in emaj_group_def
select emaj.emaj_estimate_rollback_group(NULL,NULL,FALSE);
ERROR:  _check_group_names: No group to process.
CONTEXT:  SQL statement "SELECT emaj._check_group_names(v_groupNames := v_groupNames, v_mayBeNull := v_multiGroup, v_lockGroups := FALSE, v_checkList := '')"
PL/pgSQL function emaj._estimate_rollback_groups(text[],boolean,text,boolean) line 17 at SQL statement
PL/pgSQL function emaj.emaj_estimate_rollback_group(text,text,boolean) line 7 at RETURN
select emaj.emaj_estimate_rollback_group('unknownGroup',NULL,TRUE);
ERROR:  _check_group_names: The group "unknownGroup" does not exist.
CONTEXT:  SQL statement "SELECT emaj._check_group_names(v_groupNames := v_groupNames, v_mayBeNull := v_multiGroup, v_lockGroups := FALSE, v_checkList := '')"
PL/pgSQL function emaj._estimate_rollback_groups(text[],boolean,text,boolean) line 17 at SQL statement
PL/pgSQL function emaj.emaj_estimate_rollback_group(text,text,boolean) line 7 at RETURN
select emaj.emaj_estimate_rollback_groups('{"myGroup2","unknownGroup"}',NULL,TRUE);
ERROR:  _check_group_names: The group "unknownGroup" does not exist.
CONTEXT:  SQL statement "SELECT emaj._check_group_names(v_groupNames := v_groupNames, v_mayBeNull := v_multiGroup, v_lockGroups := FALSE, v_checkList := '')"
PL/pgSQL function emaj._estimate_rollback_groups(text[],boolean,text,boolean) line 17 at SQL statement
PL/pgSQL function emaj.emaj_estimate_rollback_groups(text[],text,boolean) line 7 at RETURN
-- invalid marks
select emaj.emaj_estimate_rollback_group('myGroup2','dummyMark',TRUE);
ERROR:  _check_mark_name: The mark "dummyMark" does not exist for the group "myGroup2".
CONTEXT:  SQL statement "SELECT emaj._check_mark_name(v_groupNames := v_groupNames, v_mark := v_mark, v_checkList := 'ACTIVE')"
PL/pgSQL function emaj._rlbk_check(text[],text,boolean,boolean) line 20 at SQL statement
SQL statement "SELECT emaj._rlbk_check(v_groupNames, v_mark, TRUE, TRUE)"
PL/pgSQL function emaj._estimate_rollback_groups(text[],boolean,text,boolean) line 23 at SQL statement
PL/pgSQL function emaj.emaj_estimate_rollback_group(text,text,boolean) line 7 at RETURN
select emaj.emaj_estimate_rollback_groups(array['myGroup1','myGroup2'],'Mark21',TRUE);
ERROR:  _check_mark_name: The mark "Mark21" does not represent the same point in time for all groups.
CONTEXT:  SQL statement "SELECT emaj._check_mark_name(v_groupNames := v_groupNames, v_mark := v_mark, v_checkList := 'ACTIVE')"
PL/pgSQL function emaj._rlbk_check(text[],text,boolean,boolean) line 20 at SQL statement
SQL statement "SELECT emaj._rlbk_check(v_groupNames, v_mark, TRUE, TRUE)"
PL/pgSQL function emaj._estimate_rollback_groups(text[],boolean,text,boolean) line 23 at SQL statement
PL/pgSQL function emaj.emaj_estimate_rollback_groups(text[],text,boolean) line 7 at RETURN
-- group not in logging state
begin;
  select emaj.emaj_stop_group('myGroup1');
 emaj_stop_group 
-----------------
               7
(1 row)

  select emaj.emaj_estimate_rollback_group('myGroup1','Mark11',FALSE);
ERROR:  _check_group_names: The group "myGroup1" is not in LOGGING state.
CONTEXT:  SQL statement "SELECT emaj._check_group_names(v_groupNames := v_groupNames, v_mayBeNull := FALSE, v_lockGroups := TRUE, v_checkList := 'LOGGING,ROLLBACKABLE')"
PL/pgSQL function emaj._rlbk_check(text[],text,boolean,boolean) line 14 at SQL statement
SQL statement "SELECT emaj._rlbk_check(v_groupNames, v_mark, TRUE, TRUE)"
PL/pgSQL function emaj._estimate_rollback_groups(text[],boolean,text,boolean) line 23 at SQL statement
PL/pgSQL function emaj.emaj_estimate_rollback_group(text,text,boolean) line 7 at RETURN
rollback;
-- estimate a rollback of an empty group
select emaj.emaj_estimate_rollback_group('emptyGroup','EGM4',TRUE);
 emaj_estimate_rollback_group 
------------------------------
 @ 0
(1 row)

-- insert 1 timing parameters (=> so use 3 default values)
INSERT INTO emaj.emaj_param (param_key, param_value_interval) VALUES ('fixed_step_rollback_duration','2.5 millisecond'::interval);
-- analyze tables to get proper reltuples statistics
vacuum analyze myschema2.mytbl4;
select reltuples from pg_class, pg_namespace where relnamespace=pg_namespace.oid and relname = 'mytbl4' and nspname = 'myschema2';
 reltuples 
-----------
       100
(1 row)

-- estimate with empty rollback statistics and default parameters
delete from emaj.emaj_rlbk_stat;
-- estimates with empty rollback statistics but 1 temporarily modified parameter ; no table to rollback
-- check in passing that the simulation is not blocked by protections set on groups or marks
begin;
  select emaj.emaj_protect_group('myGroup2');
 emaj_protect_group 
--------------------
                  1
(1 row)

  select emaj.emaj_protect_mark_group('myGroup2','EMAJ_LAST_MARK');
 emaj_protect_mark_group 
-------------------------
                       1
(1 row)

  INSERT INTO emaj.emaj_param (param_key, param_value_interval) VALUES ('fixed_table_rollback_duration','1.4 millisecond'::interval);
  select emaj.emaj_estimate_rollback_group('myGroup2','EMAJ_LAST_MARK',FALSE);
 emaj_estimate_rollback_group 
------------------------------
 @ 0.0112 secs
(1 row)

-- should return 0.011200 sec
  select emaj.emaj_unprotect_mark_group('myGroup2','EMAJ_LAST_MARK');
 emaj_unprotect_mark_group 
---------------------------
                         1
(1 row)

  select emaj.emaj_unprotect_group('myGroup2');
 emaj_unprotect_group 
----------------------
                    1
(1 row)

rollback;
select emaj.emaj_estimate_rollback_group('myGroup2','Mark21',FALSE);
 emaj_estimate_rollback_group 
------------------------------
 @ 1.4251 secs
(1 row)

-- should return 1.425100 sec
-- estimates with empty rollback statistics but temporarily modified parameters
begin;
  INSERT INTO emaj.emaj_param (param_key, param_value_interval) VALUES ('avg_row_rollback_duration','150 microsecond'::interval);
  INSERT INTO emaj.emaj_param (param_key, param_value_interval) VALUES ('avg_row_delete_log_duration','12 microsecond'::interval);
  INSERT INTO emaj.emaj_param (param_key, param_value_interval) VALUES ('avg_fkey_check_duration','27 microsecond'::interval);
  UPDATE emaj.emaj_param SET param_value_interval = '7 millisecond'::interval WHERE param_key = 'fixed_step_rollback_duration';
  INSERT INTO emaj.emaj_param (param_key, param_value_interval) VALUES ('fixed_dblink_rollback_duration','2.5 millisecond'::interval);
  select emaj.emaj_estimate_rollback_groups('{"myGroup2"}','Mark21',TRUE);
 emaj_estimate_rollback_groups 
-------------------------------
 @ 1.8607 secs
(1 row)

-- should return 1.860700 sec
rollback;
-- estimate with added rollback statistics about fkey drops, recreations and checks
--   drop the foreign key on emaj_rlbk_stat to easily temporarily insert dummy rows
alter table emaj.emaj_rlbk_stat drop constraint emaj_rlbk_stat_rlbt_rlbk_id_fkey;
insert into emaj.emaj_rlbk_stat values
  ('DROP_FK','','','',1,1,'0.003 SECONDS'::interval);
insert into emaj.emaj_rlbk_stat values
  ('ADD_FK','myschema2','mytbl4','mytbl4_col44_fkey',1,300,'0.036 SECONDS'::interval);
insert into emaj.emaj_rlbk_stat values
  ('SET_FK_IMM','myschema2','mytbl4','mytbl4_col43_fkey',1,2000,'0.030 SECONDS'::interval);
insert into emaj.emaj_rlbk_stat values
  ('DROP_FK','','','',2,1,'0.0042 SECONDS'::interval);
insert into emaj.emaj_rlbk_stat values
  ('ADD_FK','myschema2','mytbl4','mytbl4_col44_fkey',2,200,'0.020 SECONDS'::interval);
insert into emaj.emaj_rlbk_stat values
  ('SET_FK_IMM','myschema2','mytbl4','mytbl4_col43_fkey',2,1200,'0.015 SECONDS'::interval);
select emaj.emaj_estimate_rollback_group('myGroup2','Mark21',FALSE);
 emaj_estimate_rollback_group 
------------------------------
 @ 1.440962 secs
(1 row)

-- should return 1.440962 sec
-- estimate with added statistics about tables rollbacks
insert into emaj.emaj_rlbk_stat values
  ('RLBK_TABLE','myschema2','mytbl1','',1,5350,'1.000 SECONDS'::interval);
insert into emaj.emaj_rlbk_stat values
  ('RLBK_TABLE','myschema2','mytbl2','',1,100,'0.004 SECONDS'::interval);
insert into emaj.emaj_rlbk_stat values
  ('RLBK_TABLE','myschema2','mytbl2','',2,200,'0.010 SECONDS'::interval);
insert into emaj.emaj_rlbk_stat values
  ('RLBK_TABLE','myschema2','mytbl2','',3,20000,'1.610 SECONDS'::interval);
insert into emaj.emaj_rlbk_stat values
  ('RLBK_TABLE','myschema2','myTbl3','',1,99,'0.004 SECONDS'::interval);
insert into emaj.emaj_rlbk_stat values
  ('RLBK_TABLE','myschema2','myTbl3','',2,101,'0.008 SECONDS'::interval);
insert into emaj.emaj_rlbk_stat values
  ('RLBK_TABLE','myschema2','mytbl4','',1,50000,'3.600 SECONDS'::interval);
select emaj.emaj_estimate_rollback_group('myGroup2','Mark21',FALSE);
 emaj_estimate_rollback_group 
------------------------------
 @ 2.309566 secs
(1 row)

-- should return 2.309566 sec
-- estimate with added statistics about log deletes and CTRLxDBLINK pseudo steps
insert into emaj.emaj_rlbk_stat values
  ('DELETE_LOG','myschema2','mytbl1','',1,5350,'0.250 SECONDS'::interval);
insert into emaj.emaj_rlbk_stat values
  ('DELETE_LOG','myschema2','mytbl2','',1,150,'0.001 SECONDS'::interval);
insert into emaj.emaj_rlbk_stat values
  ('DELETE_LOG','myschema2','mytbl2','',2,200,'0.003 SECONDS'::interval);
insert into emaj.emaj_rlbk_stat values
  ('DELETE_LOG','myschema2','mytbl2','',3,20000,'1.610 SECONDS'::interval);
insert into emaj.emaj_rlbk_stat values
  ('DELETE_LOG','myschema2','myTbl3','',1,99,'0.001 SECONDS'::interval);
insert into emaj.emaj_rlbk_stat values
  ('DELETE_LOG','myschema2','myTbl3','',2,151,'0.002 SECONDS'::interval);
insert into emaj.emaj_rlbk_stat values
  ('DELETE_LOG','myschema2','mytbl4','',1,50000,'0.900 SECONDS'::interval);
insert into emaj.emaj_rlbk_stat values
  ('CTRL+DBLINK','','','',1,10,'0.005 SECONDS'::interval);
insert into emaj.emaj_rlbk_stat values
  ('CTRL-DBLINK','','','',2,10,'0.035 SECONDS'::interval);
insert into emaj.emaj_rlbk_stat values
  ('CTRL-DBLINK','','','',3,10,'0.025 SECONDS'::interval);
select emaj.emaj_estimate_rollback_group('myGroup2','Mark21',FALSE);
 emaj_estimate_rollback_group 
------------------------------
 @ 2.675653 secs
(1 row)

-- should return 2.675653 sec
-- estimate with 2 groups and a SET_FK_DEF step
vacuum analyze myschema1.mytbl4;
select reltuples from pg_class, pg_namespace where relnamespace=pg_namespace.oid and relname = 'mytbl4' and nspname = 'myschema1';
 reltuples 
-----------
         1
(1 row)

begin;
-- temporarily insert new rows into myTbl4 of myschema1
  insert into myschema1.myTbl4 select i,'FK...',2,1,'ABC' from generate_series (10,20) as i;
  select emaj.emaj_estimate_rollback_groups('{"myGroup1","myGroup2"}','Multi-1',FALSE);
 emaj_estimate_rollback_groups 
-------------------------------
 @ 2.729023 secs
(1 row)

-- should return 2.729023 sec
rollback;
-- delete all manualy inserted rollback statistics, cleanup the statistics table and recreate its foreign key
delete from emaj.emaj_rlbk_stat;
vacuum emaj.emaj_rlbk_stat;
alter table emaj.emaj_rlbk_stat add FOREIGN KEY (rlbt_rlbk_id) REFERENCES emaj.emaj_rlbk (rlbk_id);
-----------------------------
-- emaj_snap_group() test
-----------------------------
-- set/reset directory for snaps
\! mkdir -p /tmp/emaj_test/snaps
\! rm -R /tmp/emaj_test/snaps
\! mkdir /tmp/emaj_test/snaps
-- group is unknown in emaj_group_def
select emaj.emaj_snap_group(NULL,NULL,NULL);
ERROR:  _check_group_names: No group to process.
CONTEXT:  SQL statement "SELECT emaj._check_group_names(v_groupNames := ARRAY[v_groupName], v_mayBeNull := FALSE, v_lockGroups := FALSE, v_checkList := '')"
PL/pgSQL function emaj.emaj_snap_group(text,text,text) line 30 at PERFORM
select emaj.emaj_snap_group('unknownGroup',NULL,NULL);
ERROR:  _check_group_names: The group "unknownGroup" does not exist.
CONTEXT:  SQL statement "SELECT emaj._check_group_names(v_groupNames := ARRAY[v_groupName], v_mayBeNull := FALSE, v_lockGroups := FALSE, v_checkList := '')"
PL/pgSQL function emaj.emaj_snap_group(text,text,text) line 30 at PERFORM
-- invalid directory
select emaj.emaj_snap_group('myGroup1',NULL,NULL);
ERROR:  emaj_snap_group: The directory parameter cannot be NULL.
select emaj.emaj_snap_group('myGroup1','unknown_directory',NULL);
ERROR:  relative path not allowed for COPY to file
CONTEXT:  SQL statement "COPY (SELECT sequence_name, last_value, start_value, increment_by, max_value, min_value, cache_value, is_cycled, is_called FROM myschema1."myTbl3_col31_seq") TO 'unknown_directory/myschema1_myTbl3_col31_seq.snap' "
PL/pgSQL function emaj.emaj_snap_group(text,text,text) line 87 at EXECUTE statement
select emaj.emaj_snap_group('myGroup1','/unknown_directory',NULL);
ERROR:  could not open file "/unknown_directory/myschema1_myTbl3_col31_seq.snap" for writing: No such file or directory
CONTEXT:  SQL statement "COPY (SELECT sequence_name, last_value, start_value, increment_by, max_value, min_value, cache_value, is_cycled, is_called FROM myschema1."myTbl3_col31_seq") TO '/unknown_directory/myschema1_myTbl3_col31_seq.snap' "
PL/pgSQL function emaj.emaj_snap_group(text,text,text) line 87 at EXECUTE statement
-- invalid COPY TO options
select emaj.emaj_snap_group('myGroup1','/tmp/emaj_test/snaps','dummy_option');
ERROR:  syntax error at or near "dummy_option"
LINE 1: .../emaj_test/snaps/myschema1_myTbl3_col31_seq.snap' dummy_opti...
                                                             ^
QUERY:  COPY (SELECT sequence_name, last_value, start_value, increment_by, max_value, min_value, cache_value, is_cycled, is_called FROM myschema1."myTbl3_col31_seq") TO '/tmp/emaj_test/snaps/myschema1_myTbl3_col31_seq.snap' dummy_option
CONTEXT:  PL/pgSQL function emaj.emaj_snap_group(text,text,text) line 87 at EXECUTE statement
-- SQL injection attempt
select emaj.emaj_snap_group('myGroup1','/tmp/emaj_test/snaps','; CREATE ROLE fake LOGIN PASSWORD '''' SUPERUSER');
ERROR:  emaj_snap_group: The COPY options parameter format is invalid.
-- should be OK (even when executed twice, files being overwriten)
select emaj.emaj_snap_group('emptyGroup','/tmp/emaj_test/snaps','');
 emaj_snap_group 
-----------------
               0
(1 row)

\! ls /tmp/emaj_test/snaps
_INFO
select emaj.emaj_snap_group('myGroup1','/tmp/emaj_test/snaps','');
 emaj_snap_group 
-----------------
               7
(1 row)

select emaj.emaj_snap_group('myGroup1','/tmp/emaj_test/snaps','CSV HEADER DELIMITER '';'' ');
 emaj_snap_group 
-----------------
               7
(1 row)

\! ls /tmp/emaj_test/snaps
_INFO
myschema1_mytbl1.snap
myschema1_mytbl2b_col20_seq.snap
myschema1_mytbl2b.snap
myschema1_mytbl2.snap
myschema1_myTbl3_col31_seq.snap
myschema1_myTbl3.snap
myschema1_mytbl4.snap
-----------------------------
-- emaj_snap_log_group() test
-----------------------------
-- set/reset directory for log snaps
\! mkdir -p /tmp/emaj_test/log_snaps
\! rm -R /tmp/emaj_test/log_snaps
\! mkdir /tmp/emaj_test/log_snaps
-- group is unknown in emaj_group_def
select emaj.emaj_snap_log_group(NULL,NULL,NULL,NULL,NULL);
ERROR:  _check_group_names: No group to process.
CONTEXT:  SQL statement "SELECT emaj._check_group_names(v_groupNames := ARRAY[v_groupName], v_mayBeNull := FALSE, v_lockGroups := FALSE, v_checkList := '')"
PL/pgSQL function emaj.emaj_snap_log_group(text,text,text,text,text) line 46 at PERFORM
select emaj.emaj_snap_log_group('unknownGroup',NULL,NULL,NULL,NULL);
ERROR:  _check_group_names: The group "unknownGroup" does not exist.
CONTEXT:  SQL statement "SELECT emaj._check_group_names(v_groupNames := ARRAY[v_groupName], v_mayBeNull := FALSE, v_lockGroups := FALSE, v_checkList := '')"
PL/pgSQL function emaj.emaj_snap_log_group(text,text,text,text,text) line 46 at PERFORM
-- invalid directory
select emaj.emaj_snap_log_group('myGroup2',NULL,'EMAJ_LAST_MARK',NULL,NULL);
ERROR:  emaj_snap_log_group: The directory parameter cannot be NULL.
select emaj.emaj_snap_log_group('myGroup2',NULL,'EMAJ_LAST_MARK','unknown_directory',NULL);
ERROR:  relative path not allowed for COPY to file
CONTEXT:  SQL statement "COPY (SELECT * FROM emaj.myschema2_mytbl1_log WHERE TRUE AND emaj_gid <= 11850 ORDER BY emaj_gid ASC) TO 'unknown_directory/myschema2_mytbl1_log.snap' "
PL/pgSQL function emaj.emaj_snap_log_group(text,text,text,text,text) line 96 at EXECUTE statement
select emaj.emaj_snap_log_group('myGroup2',NULL,'EMAJ_LAST_MARK','/unknown_directory',NULL);
ERROR:  could not open file "/unknown_directory/myschema2_mytbl1_log.snap" for writing: No such file or directory
CONTEXT:  SQL statement "COPY (SELECT * FROM emaj.myschema2_mytbl1_log WHERE TRUE AND emaj_gid <= 11850 ORDER BY emaj_gid ASC) TO '/unknown_directory/myschema2_mytbl1_log.snap' "
PL/pgSQL function emaj.emaj_snap_log_group(text,text,text,text,text) line 96 at EXECUTE statement
-- invalid start mark
select emaj.emaj_snap_log_group('myGroup2','unknownMark','EMAJ_LAST_MARK','/tmp/emaj_test/log_snaps',NULL);
ERROR:  _check_mark_name: The mark "unknownMark" does not exist for the group "myGroup2".
CONTEXT:  SQL statement "SELECT emaj._check_mark_name (v_groupNames := v_groupNames, v_mark := v_firstMark, v_checkList := '')"
PL/pgSQL function emaj._check_marks_range(text[],text,text) line 56 at SQL statement
SQL statement "SELECT * FROM emaj._check_marks_range(ARRAY[v_groupName], v_firstMark, v_lastMark)"
PL/pgSQL function emaj.emaj_snap_log_group(text,text,text,text,text) line 49 at SQL statement
-- invalid end mark
select emaj.emaj_snap_log_group('myGroup2','','unknownMark','/tmp/emaj_test/log_snaps',NULL);
ERROR:  _check_mark_name: The mark "unknownMark" does not exist for the group "myGroup2".
CONTEXT:  SQL statement "SELECT emaj._check_mark_name (v_groupNames := v_groupNames, v_mark := v_lastMark, v_checkList := '')"
PL/pgSQL function emaj._check_marks_range(text[],text,text) line 65 at SQL statement
SQL statement "SELECT * FROM emaj._check_marks_range(ARRAY[v_groupName], v_firstMark, v_lastMark)"
PL/pgSQL function emaj.emaj_snap_log_group(text,text,text,text,text) line 49 at SQL statement
-- start mark > end mark
-- just check the error is trapped, because the error message contents timestamps
create function test_snap_log(v_groupName TEXT, v_firstMark TEXT, v_lastMark TEXT) returns void language plpgsql as 
$$
begin
  begin
    perform emaj.emaj_snap_log_group(v_groupName,v_firstMark,v_lastMark,'/tmp/emaj_test/log_snaps',NULL);
    return;
  exception when raise_exception then
    raise notice 'Error trapped on emaj_snap_log_group() call';
  end;
  return;
end;
$$;
select test_snap_log('myGroup2','Mark23','Mark21');
NOTICE:  Error trapped on emaj_snap_log_group() call
 test_snap_log 
---------------
 
(1 row)

select test_snap_log('myGroup2','EMAJ_LAST_MARK','Mark22');
NOTICE:  Error trapped on emaj_snap_log_group() call
 test_snap_log 
---------------
 
(1 row)

drop function test_snap_log(text,text,text);
-- invalid COPY TO options
select emaj.emaj_snap_log_group('myGroup2',NULL,'EMAJ_LAST_MARK','/tmp/emaj_test/log_snaps', 'dummy_option');
ERROR:  syntax error at or near "dummy_option"
LINE 1: ...mp/emaj_test/log_snaps/myschema2_mytbl1_log.snap' dummy_opti...
                                                             ^
QUERY:  COPY (SELECT * FROM emaj.myschema2_mytbl1_log WHERE TRUE AND emaj_gid <= 11850 ORDER BY emaj_gid ASC) TO '/tmp/emaj_test/log_snaps/myschema2_mytbl1_log.snap' dummy_option
CONTEXT:  PL/pgSQL function emaj.emaj_snap_log_group(text,text,text,text,text) line 96 at EXECUTE statement
-- SQL injection attempt
select emaj.emaj_snap_log_group('myGroup2',NULL,'EMAJ_LAST_MARK','/tmp/emaj_test/log_snaps','; CREATE ROLE fake LOGIN PASSWORD '''' SUPERUSER');
ERROR:  emaj_snap_log_group: The COPY options parameter format is invalid.
-- should be ok
select emaj.emaj_snap_log_group('emptyGroup','EGM3','EGM4','/tmp/emaj_test/log_snaps',NULL);
 emaj_snap_log_group 
---------------------
                   3
(1 row)

\! ls /tmp/emaj_test/log_snaps
emptyGroup_sequences_at_EGM3
emptyGroup_sequences_at_EGM4
_INFO
\! cat /tmp/emaj_test/log_snaps/emptyGroup_sequences_at_EGM3
\! rm /tmp/emaj_test/log_snaps/*
select emaj.emaj_snap_log_group('myGroup2',NULL,'EMAJ_LAST_MARK','/tmp/emaj_test/log_snaps',NULL);
 emaj_snap_log_group 
---------------------
                   9
(1 row)

select emaj.emaj_snap_log_group('myGroup2','','','/tmp/emaj_test/log_snaps','CSV');
 emaj_snap_log_group 
---------------------
                   9
(1 row)

select emaj.emaj_snap_log_group('myGroup2','Mark21',NULL,'/tmp/emaj_test/log_snaps','CSV HEADER');
 emaj_snap_log_group 
---------------------
                   9
(1 row)

select emaj.emaj_snap_log_group('myGroup2','Mark21','Mark21','/tmp/emaj_test/log_snaps','CSV');
 emaj_snap_log_group 
---------------------
                   3
(1 row)

select emaj.emaj_snap_log_group('myGroup2','Mark21','Mark23','/tmp/emaj_test/log_snaps',NULL);
 emaj_snap_log_group 
---------------------
                   9
(1 row)

\! ls /tmp/emaj_test/log_snaps |sed s/[0-9][0-9].[0-9][0-9].[0-9][0-9].[0-9][0-9][0-9]/\[timestamp_mask\]/g
_INFO
myGroup2_sequences_at_[timestamp_mask]
myGroup2_sequences_at_[timestamp_mask]
myGroup2_sequences_at_Mark21
myGroup2_sequences_at_Mark23
myGroup2_sequences_at_Multi-3
myschema2_mytbl1_log.snap
myschema2_mytbl2_log.snap
myschema2_myTbl3_log.snap
myschema2_mytbl4_log.snap
myschema2_mytbl6_log.snap
otherPrefix4mytbl5_log.snap
-----------------------------
-- emaj_gen_sql_group() and emaj_gen_sql_groups() test
-----------------------------
-- set/reset directory for snaps
\! mkdir -p /tmp/emaj_test/sql_scripts
\! rm -R /tmp/emaj_test/sql_scripts
\! mkdir /tmp/emaj_test/sql_scripts
-- group is unknown in emaj_group_def
select emaj.emaj_gen_sql_group(NULL, NULL, NULL, NULL);
ERROR:  _check_group_names: No group to process.
CONTEXT:  SQL statement "SELECT emaj._check_group_names(v_groupNames := v_groupNames, v_mayBeNull := v_multiGroup, v_lockGroups := FALSE, v_checkList := '')"
PL/pgSQL function emaj._gen_sql_groups(text[],boolean,text,text,text,text[]) line 42 at SQL statement
PL/pgSQL function emaj.emaj_gen_sql_group(text,text,text,text,text[]) line 13 at RETURN
select emaj.emaj_gen_sql_group('unknownGroup', NULL, NULL, NULL, NULL);
ERROR:  _check_group_names: The group "unknownGroup" does not exist.
CONTEXT:  SQL statement "SELECT emaj._check_group_names(v_groupNames := v_groupNames, v_mayBeNull := v_multiGroup, v_lockGroups := FALSE, v_checkList := '')"
PL/pgSQL function emaj._gen_sql_groups(text[],boolean,text,text,text,text[]) line 42 at SQL statement
PL/pgSQL function emaj.emaj_gen_sql_group(text,text,text,text,text[]) line 13 at RETURN
select emaj.emaj_gen_sql_groups(NULL, NULL, NULL, NULL);
WARNING:  _check_group_names: No group to process.
CONTEXT:  SQL statement "SELECT emaj._check_group_names(v_groupNames := v_groupNames, v_mayBeNull := v_multiGroup, v_lockGroups := FALSE, v_checkList := '')"
PL/pgSQL function emaj._gen_sql_groups(text[],boolean,text,text,text,text[]) line 42 at SQL statement
PL/pgSQL function emaj.emaj_gen_sql_groups(text[],text,text,text,text[]) line 13 at RETURN
 emaj_gen_sql_groups 
---------------------
                   0
(1 row)

select emaj.emaj_gen_sql_groups('{"myGroup1","unknownGroup"}', NULL, NULL, NULL);
ERROR:  _check_group_names: The group "unknownGroup" does not exist.
CONTEXT:  SQL statement "SELECT emaj._check_group_names(v_groupNames := v_groupNames, v_mayBeNull := v_multiGroup, v_lockGroups := FALSE, v_checkList := '')"
PL/pgSQL function emaj._gen_sql_groups(text[],boolean,text,text,text,text[]) line 42 at SQL statement
PL/pgSQL function emaj.emaj_gen_sql_groups(text[],text,text,text,text[]) line 13 at RETURN
-- the tables group contains a table without pkey
select emaj.emaj_gen_sql_group('phil''s group#3",', NULL, NULL, '/tmp/emaj_test/sql_scripts/Group3');
ERROR:  _gen_sql_groups: 1 table of the group(s) has no pkey (phil's schema3.myTbl2\).
CONTEXT:  PL/pgSQL function emaj.emaj_gen_sql_group(text,text,text,text,text[]) line 13 at RETURN
begin;
  alter table myschema1."myTbl3" drop constraint "myTbl3_pkey";
  select emaj.emaj_gen_sql_groups(array['myGroup1','phil''s group#3",'], NULL, NULL, '/tmp/emaj_test/sql_scripts/Group3');
ERROR:  _gen_sql_groups: 2 tables of the group(s) have no pkey (myschema1.myTbl3, phil's schema3.myTbl2\).
CONTEXT:  PL/pgSQL function emaj.emaj_gen_sql_groups(text[],text,text,text,text[]) line 13 at RETURN
rollback;
-- invalid start mark
select emaj.emaj_gen_sql_group('myGroup2', 'unknownMark', NULL, NULL);
ERROR:  _check_mark_name: The mark "unknownMark" does not exist for the group "myGroup2".
CONTEXT:  SQL statement "SELECT emaj._check_mark_name (v_groupNames := v_groupNames, v_mark := v_firstMark, v_checkList := '')"
PL/pgSQL function emaj._check_marks_range(text[],text,text) line 56 at SQL statement
SQL statement "SELECT * FROM emaj._check_marks_range(v_groupNames, v_firstMark, v_lastMark)"
PL/pgSQL function emaj._gen_sql_groups(text[],boolean,text,text,text,text[]) line 62 at SQL statement
PL/pgSQL function emaj.emaj_gen_sql_group(text,text,text,text,text[]) line 13 at RETURN
select emaj.emaj_gen_sql_groups('{"myGroup1","myGroup2"}', 'Mark11', NULL, NULL, NULL);
ERROR:  _check_mark_name: The mark "Mark11" does not exist for the groups "myGroup1, myGroup2".
CONTEXT:  SQL statement "SELECT emaj._check_mark_name (v_groupNames := v_groupNames, v_mark := v_firstMark, v_checkList := '')"
PL/pgSQL function emaj._check_marks_range(text[],text,text) line 56 at SQL statement
SQL statement "SELECT * FROM emaj._check_marks_range(v_groupNames, v_firstMark, v_lastMark)"
PL/pgSQL function emaj._gen_sql_groups(text[],boolean,text,text,text,text[]) line 62 at SQL statement
PL/pgSQL function emaj.emaj_gen_sql_groups(text[],text,text,text,text[]) line 13 at RETURN
-- invalid end mark
select emaj.emaj_gen_sql_group('myGroup2', NULL, 'unknownMark', NULL);
ERROR:  _check_mark_name: The mark "unknownMark" does not exist for the group "myGroup2".
CONTEXT:  SQL statement "SELECT emaj._check_mark_name (v_groupNames := v_groupNames, v_mark := v_lastMark, v_checkList := '')"
PL/pgSQL function emaj._check_marks_range(text[],text,text) line 65 at SQL statement
SQL statement "SELECT * FROM emaj._check_marks_range(v_groupNames, v_firstMark, v_lastMark)"
PL/pgSQL function emaj._gen_sql_groups(text[],boolean,text,text,text,text[]) line 62 at SQL statement
PL/pgSQL function emaj.emaj_gen_sql_group(text,text,text,text,text[]) line 13 at RETURN
select emaj.emaj_gen_sql_groups('{"myGroup1","myGroup2"}', 'Multi-1', 'Mark11', NULL);
ERROR:  _check_mark_name: The mark "Mark11" does not exist for the groups "myGroup1, myGroup2".
CONTEXT:  SQL statement "SELECT emaj._check_mark_name (v_groupNames := v_groupNames, v_mark := v_lastMark, v_checkList := '')"
PL/pgSQL function emaj._check_marks_range(text[],text,text) line 65 at SQL statement
SQL statement "SELECT * FROM emaj._check_marks_range(v_groupNames, v_firstMark, v_lastMark)"
PL/pgSQL function emaj._gen_sql_groups(text[],boolean,text,text,text,text[]) line 62 at SQL statement
PL/pgSQL function emaj.emaj_gen_sql_groups(text[],text,text,text,text[]) line 13 at RETURN
-- end mark is prior start mark
-- (mark timestamps are temporarily changed so that regression test can return a stable error message)
begin;
  update emaj.emaj_time_stamp set time_clock_timestamp = '2000-01-01 12:00:00+00' 
    from emaj.emaj_mark
    where time_id = mark_time_id and mark_group = 'myGroup2' and mark_name = 'Mark21';
  update emaj.emaj_time_stamp set time_clock_timestamp = '2000-01-01 13:00:00+00'
    from emaj.emaj_mark
    where time_id = mark_time_id and mark_group = 'myGroup2' and mark_name = 'Mark22';
  select emaj.emaj_gen_sql_group('myGroup2', 'Mark22', 'Mark21', NULL);
ERROR:  _check_marks_range: The start mark "Mark22" (Sat Jan 01 05:00:00 2000 PST) has been set after the end mark "Mark21" (Sat Jan 01 04:00:00 2000 PST).
CONTEXT:  SQL statement "SELECT * FROM emaj._check_marks_range(v_groupNames, v_firstMark, v_lastMark)"
PL/pgSQL function emaj._gen_sql_groups(text[],boolean,text,text,text,text[]) line 62 at SQL statement
PL/pgSQL function emaj.emaj_gen_sql_group(text,text,text,text,text[]) line 13 at RETURN
rollback;
begin;
  update emaj.emaj_time_stamp set time_clock_timestamp = '2000-01-01 12:00:00+00'
    from emaj.emaj_mark
    where time_id = mark_time_id and mark_name = 'Multi-2';
  update emaj.emaj_time_stamp set time_clock_timestamp = '2000-01-01 13:00:00+00'
    from emaj.emaj_mark
    where time_id = mark_time_id and mark_name = 'Multi-3';
  select emaj.emaj_gen_sql_groups(array['myGroup1','myGroup2'], 'Multi-3', 'Multi-2', NULL);
ERROR:  _check_marks_range: The start mark "Multi-3" (Sat Jan 01 05:00:00 2000 PST) has been set after the end mark "Multi-2" (Sat Jan 01 04:00:00 2000 PST).
CONTEXT:  SQL statement "SELECT * FROM emaj._check_marks_range(v_groupNames, v_firstMark, v_lastMark)"
PL/pgSQL function emaj._gen_sql_groups(text[],boolean,text,text,text,text[]) line 62 at SQL statement
PL/pgSQL function emaj.emaj_gen_sql_groups(text[],text,text,text,text[]) line 13 at RETURN
rollback;
-- start mark with the same name but that doesn't correspond to the same point in time
  select emaj.emaj_gen_sql_groups(array['myGroup1','myGroup2'], 'Mark21', 'Multi-2', NULL);
ERROR:  _check_mark_name: The mark "Mark21" does not represent the same point in time for all groups.
CONTEXT:  SQL statement "SELECT emaj._check_mark_name (v_groupNames := v_groupNames, v_mark := v_firstMark, v_checkList := '')"
PL/pgSQL function emaj._check_marks_range(text[],text,text) line 56 at SQL statement
SQL statement "SELECT * FROM emaj._check_marks_range(v_groupNames, v_firstMark, v_lastMark)"
PL/pgSQL function emaj._gen_sql_groups(text[],boolean,text,text,text,text[]) line 62 at SQL statement
PL/pgSQL function emaj.emaj_gen_sql_groups(text[],text,text,text,text[]) line 13 at RETURN
  select emaj.emaj_gen_sql_groups(array['myGroup1','myGroup2'], NULL, 'Multi-2', NULL, NULL);
ERROR:  _check_marks_range: The oldest marks of each group do not represent the same point in time.
CONTEXT:  SQL statement "SELECT * FROM emaj._check_marks_range(v_groupNames, v_firstMark, v_lastMark)"
PL/pgSQL function emaj._gen_sql_groups(text[],boolean,text,text,text,text[]) line 62 at SQL statement
PL/pgSQL function emaj.emaj_gen_sql_groups(text[],text,text,text,text[]) line 13 at RETURN
-- start mark with the same point in time but not with the same name
--TODO: uncomment once the bug with the group start resetting the log sequences will be solved
begin;
  select emaj.emaj_stop_groups(array['myGroup1','myGroup2']);
 emaj_stop_groups 
------------------
               15
(1 row)

  select emaj.emaj_start_groups(array['myGroup1','myGroup2'],'Common_mark_name');
WARNING:  _check_fk_groups: The foreign key "mytbl6_col61_fkey" on the table "myschema2.mytbl6" references the table "myschema2.mytbl7" that is outside the groups (myGroup1,myGroup2).
CONTEXT:  SQL statement "SELECT emaj._check_fk_groups(v_groupNames)"
PL/pgSQL function emaj._start_groups(text[],text,boolean,boolean) line 25 at PERFORM
PL/pgSQL function emaj.emaj_start_groups(text[],text,boolean) line 11 at RETURN
WARNING:  _check_fk_groups: The table "myschema2.mytbl6" is referenced by the foreign key "mytbl8_col81_fkey" on the table "myschema2.mytbl8" that is outside the groups (myGroup1,myGroup2).
CONTEXT:  SQL statement "SELECT emaj._check_fk_groups(v_groupNames)"
PL/pgSQL function emaj._start_groups(text[],text,boolean,boolean) line 25 at PERFORM
PL/pgSQL function emaj.emaj_start_groups(text[],text,boolean) line 11 at RETURN
 emaj_start_groups 
-------------------
                15
(1 row)

  select emaj.emaj_rename_mark_group('myGroup1', 'Common_mark_name', 'Renamed');
 emaj_rename_mark_group 
------------------------
 
(1 row)

  select emaj.emaj_gen_sql_groups(array['myGroup1','myGroup2'], NULL, NULL, NULL);
ERROR:  _check_marks_range: The oldest marks of each group have not the same name.
CONTEXT:  SQL statement "SELECT * FROM emaj._check_marks_range(v_groupNames, v_firstMark, v_lastMark)"
PL/pgSQL function emaj._gen_sql_groups(text[],boolean,text,text,text,text[]) line 62 at SQL statement
PL/pgSQL function emaj.emaj_gen_sql_groups(text[],text,text,text,text[]) line 13 at RETURN
rollback;
-- end mark with the same name but that doesn't correspond to the same point in time
  select emaj.emaj_gen_sql_groups(array['myGroup1','myGroup2'], 'Multi-1', 'Mark21', NULL);
ERROR:  _check_mark_name: The mark "Mark21" does not represent the same point in time for all groups.
CONTEXT:  SQL statement "SELECT emaj._check_mark_name (v_groupNames := v_groupNames, v_mark := v_lastMark, v_checkList := '')"
PL/pgSQL function emaj._check_marks_range(text[],text,text) line 65 at SQL statement
SQL statement "SELECT * FROM emaj._check_marks_range(v_groupNames, v_firstMark, v_lastMark)"
PL/pgSQL function emaj._gen_sql_groups(text[],boolean,text,text,text,text[]) line 62 at SQL statement
PL/pgSQL function emaj.emaj_gen_sql_groups(text[],text,text,text,text[]) line 13 at RETURN
-- empty table/sequence names array
select emaj.emaj_gen_sql_group('myGroup2', NULL, 'EMAJ_LAST_MARK', '/tmp/emaj_test/sql_scripts/myFile', array['']);
ERROR:  _gen_sql_groups: The filtered table/sequence names array cannot be empty.
CONTEXT:  PL/pgSQL function emaj.emaj_gen_sql_group(text,text,text,text,text[]) line 13 at RETURN
-- unknown table/sequence names in the tables filter
select emaj.emaj_gen_sql_group('myGroup2', NULL, NULL, '/tmp/emaj_test/sql_scripts/myFile', array['foo']);
ERROR:  _gen_sql_groups: 1 table/sequence (foo) does not belong to any of the selected tables groups.
CONTEXT:  PL/pgSQL function emaj.emaj_gen_sql_group(text,text,text,text,text[]) line 13 at RETURN
select emaj.emaj_gen_sql_group('myGroup2', NULL, NULL, '/tmp/emaj_test/sql_scripts/myFile', array[
     'myschema1.mytbl1','myschema2.myTbl3_col31_seq','phil''s schema3.phil''s tbl1']);
ERROR:  _gen_sql_groups: 2 tables/sequences (myschema1.mytbl1, phil's schema3.phil's tbl1) do not belong to any of the selected tables groups.
CONTEXT:  PL/pgSQL function emaj.emaj_gen_sql_group(text,text,text,text,text[]) line 13 at RETURN
select emaj.emaj_gen_sql_groups(array['myGroup1','myGroup2'], 'Multi-1', NULL, '/tmp/emaj_test/sql_scripts/myFile', array[
     'myschema1.mytbl1','foo','myschema2.myTbl3_col31_seq','phil''s schema3.phil''s tbl1']);
ERROR:  _gen_sql_groups: 2 tables/sequences (foo, phil's schema3.phil's tbl1) do not belong to any of the selected tables groups.
CONTEXT:  PL/pgSQL function emaj.emaj_gen_sql_groups(text[],text,text,text,text[]) line 13 at RETURN
-- invalid location path name
select emaj.emaj_gen_sql_group('myGroup1', NULL, NULL, NULL);
ERROR:  _gen_sql_groups: The file "<NULL>" cannot be used as script output file.
CONTEXT:  PL/pgSQL function emaj.emaj_gen_sql_group(text,text,text,text,text[]) line 13 at RETURN
select emaj.emaj_gen_sql_group('myGroup1', NULL, NULL, '/tmp/unknownDirectory/myFile');
ERROR:  _gen_sql_groups: The file "/tmp/unknownDirectory/myFile" cannot be used as script output file.
CONTEXT:  PL/pgSQL function emaj.emaj_gen_sql_group(text,text,text,text,text[]) line 13 at RETURN
select emaj.emaj_gen_sql_groups(array['myGroup1','myGroup2'], 'Multi-1', NULL, '/tmp/unknownDirectory/myFile');
ERROR:  _gen_sql_groups: The file "/tmp/unknownDirectory/myFile" cannot be used as script output file.
CONTEXT:  PL/pgSQL function emaj.emaj_gen_sql_groups(text[],text,text,text,text[]) line 13 at RETURN
-- should be ok (generated files content is checked later in adm2.sql scenario)
-- (getting counters from detailed log statistics + the number of sequences included in the group allows a comparison with the result of emaj_gen_sql_group function)
select emaj.emaj_gen_sql_group('emptyGroup', NULL, NULL, '/tmp/emaj_test/sql_scripts/myFile');
 emaj_gen_sql_group 
--------------------
                  0
(1 row)

select emaj.emaj_gen_sql_group('myGroup2', NULL, NULL, '/tmp/emaj_test/sql_scripts/myFile');
 emaj_gen_sql_group 
--------------------
              11712
(1 row)

select sum(stat_rows)+2 as check from emaj.emaj_detailed_log_stat_group('myGroup2',NULL,NULL);
 check 
-------
 11712
(1 row)

select emaj.emaj_gen_sql_group('myGroup2', 'Mark21', NULL, '/tmp/emaj_test/sql_scripts/myFile');
 emaj_gen_sql_group 
--------------------
              11712
(1 row)

select sum(stat_rows)+2 as check from emaj.emaj_detailed_log_stat_group('myGroup2','Mark21',NULL);
 check 
-------
 11712
(1 row)

select emaj.emaj_gen_sql_group('myGroup2', NULL, 'Mark22', '/tmp/emaj_test/sql_scripts/myFile');
 emaj_gen_sql_group 
--------------------
              11602
(1 row)

select sum(stat_rows)+2 as check from emaj.emaj_detailed_log_stat_group('myGroup2',NULL,'Mark22');
 check 
-------
 11602
(1 row)

select emaj.emaj_gen_sql_groups(array['myGroup1','myGroup2'], 'Multi-1', NULL, '/tmp/emaj_test/sql_scripts/myFile');
 emaj_gen_sql_groups 
---------------------
               11714
(1 row)

select emaj.emaj_gen_sql_groups(array['myGroup1','myGroup2'], 'Multi-2', 'Multi-3', '/tmp/emaj_test/sql_scripts/myFile');
 emaj_gen_sql_groups 
---------------------
                 114
(1 row)

select emaj.emaj_gen_sql_group('myGroup2', NULL, 'EMAJ_LAST_MARK', '/tmp/emaj_test/sql_scripts/myFile');
 emaj_gen_sql_group 
--------------------
              11712
(1 row)

select sum(stat_rows)+2 as check from emaj.emaj_detailed_log_stat_group('myGroup2',NULL,'EMAJ_LAST_MARK');
 check 
-------
 11712
(1 row)

-- should be ok, with tables and sequences filtering
select stat_group, stat_schema, stat_table, stat_first_mark, stat_last_mark, stat_role, stat_verb, stat_rows
  from emaj.emaj_detailed_log_stat_group('myGroup2',NULL,'EMAJ_LAST_MARK');
 stat_group | stat_schema | stat_table | stat_first_mark | stat_last_mark | stat_role | stat_verb | stat_rows 
------------+-------------+------------+-----------------+----------------+-----------+-----------+-----------
 myGroup2   | myschema2   | mytbl1     | Mark21          | Multi-3        | postgres  | DELETE    |       100
 myGroup2   | myschema2   | mytbl1     | Mark21          | Multi-3        | postgres  | INSERT    |     10100
 myGroup2   | myschema2   | mytbl1     | Mark21          | Multi-3        | postgres  | UPDATE    |       500
 myGroup2   | myschema2   | mytbl2     | Mark21          | Multi-3        | postgres  | INSERT    |       900
 myGroup2   | myschema2   | myTbl3     | Mark21          | Multi-3        | postgres  | INSERT    |        10
 myGroup2   | myschema2   | mytbl4     | Mark21          | Multi-3        | postgres  | INSERT    |       100
(6 rows)

-- all tables and sequences
select emaj.emaj_gen_sql_group('myGroup2', NULL, 'EMAJ_LAST_MARK', '/tmp/emaj_test/sql_scripts/myFile', array[
     'myschema2.mytbl1','myschema2.mytbl2','myschema2.myTbl3','myschema2.mytbl4',
     'myschema2.mytbl5','myschema2.mytbl6','myschema2.myseq1','myschema2.myTbl3_col31_seq']);
 emaj_gen_sql_group 
--------------------
              11712
(1 row)

-- minus 1 sequence
select emaj.emaj_gen_sql_group('myGroup2', NULL, 'EMAJ_LAST_MARK', '/tmp/emaj_test/sql_scripts/myFile', array[
     'myschema2.mytbl1','myschema2.mytbl2','myschema2.myTbl3','myschema2.mytbl4',
     'myschema2.mytbl5','myschema2.mytbl6','myschema2.myseq1']);
 emaj_gen_sql_group 
--------------------
              11711
(1 row)

-- minus 1 table
select emaj.emaj_gen_sql_group('myGroup2', NULL, 'EMAJ_LAST_MARK', '/tmp/emaj_test/sql_scripts/myFile', array[
     'myschema2.mytbl1','myschema2.mytbl2','myschema2.myTbl3',
     'myschema2.mytbl5','myschema2.mytbl6','myschema2.myseq1']);
 emaj_gen_sql_group 
--------------------
              11611
(1 row)

-- only 1 sequence
select emaj.emaj_gen_sql_group('myGroup2', NULL, 'EMAJ_LAST_MARK', '/tmp/emaj_test/sql_scripts/myFile', array[
     'myschema2.myTbl3_col31_seq']);
 emaj_gen_sql_group 
--------------------
                  1
(1 row)

-- only 1 table
select emaj.emaj_gen_sql_group('myGroup2', NULL, 'EMAJ_LAST_MARK', '/tmp/emaj_test/sql_scripts/myFile', array[
     'myschema2.mytbl4']);
 emaj_gen_sql_group 
--------------------
                100
(1 row)

-- several groups and 1 table of each, with redondancy in the tables array
select emaj.emaj_gen_sql_groups(array['myGroup1','myGroup2'], 'Multi-1', 'Multi-3', '/tmp/emaj_test/sql_scripts/myFile', array[
     'myschema1.mytbl4','myschema2.mytbl4','myschema1.mytbl4','myschema2.mytbl4']);
 emaj_gen_sql_groups 
---------------------
                 100
(1 row)

\! grep 'only for' /tmp/emaj_test/sql_scripts/myFile
--    only for the following tables/sequences: myschema1.mytbl4,myschema2.mytbl4
-----------------------------
-- emaj_verify_all() test
-----------------------------
-- should be OK
select * from emaj.emaj_verify_all();
                                                                emaj_verify_all                                                                
-----------------------------------------------------------------------------------------------------------------------------------------------
 Warning: Some E-Maj event triggers exist but are disabled. You may enable them using the emaj_enable_protection_by_event_triggers() function.
 No error detected
(2 rows)

-- detection of unattended tables in E-Maj schemas
begin;
  create table emaj.dummy1_log (col1 int);
  create table emaj.dummy2 (col1 int);
  create table emajb.emaj_dummy (col1 int);
  create table emaj.emaj_dummy (col1 int);               -- this one is not detected
  select * from emaj.emaj_verify_all();
                                                                emaj_verify_all                                                                
-----------------------------------------------------------------------------------------------------------------------------------------------
 Warning: Some E-Maj event triggers exist but are disabled. You may enable them using the emaj_enable_protection_by_event_triggers() function.
 In schema "emaj", the table "emaj"."dummy1_log" is not linked to any created tables group.
 In schema "emaj", the table "emaj"."dummy2" is not linked to any created tables group.
 In schema "emajb", the table "emajb"."emaj_dummy" is not linked to any created tables group.
(4 rows)

rollback;
-- detection of unattended functions in E-Maj schemas
begin;
  create function emaj.dummy1_log_fnct () returns int language sql as $$ select 0 $$;
  create function "emajC".dummy2_rlbk_fnct () returns int language sql as $$ select 0 $$;
  create function "emajC".dummy3_fnct () returns int language sql as $$ select 0 $$;
  create function emaj._dummy4_fnct () returns int language sql as $$ select 0 $$;      -- this one is not detected
  create function emaj.emaj_dummy5_fnct () returns int language sql as $$ select 0 $$;  -- this one is not detected
  select * from emaj.emaj_verify_all();
                                                                emaj_verify_all                                                                
-----------------------------------------------------------------------------------------------------------------------------------------------
 Warning: Some E-Maj event triggers exist but are disabled. You may enable them using the emaj_enable_protection_by_event_triggers() function.
 In schema "emaj", the function "emaj"."dummy1_log_fnct" is not linked to any created tables group.
 In schema "emajC", the function "emajC"."dummy2_rlbk_fnct" is not linked to any created tables group.
 In schema "emajC", the function "emajC"."dummy3_fnct" is not linked to any created tables group.
(4 rows)

rollback;
-- detection of unattended sequences in E-Maj schemas
begin;
  create table emaj.dummy1_log (col1 serial);
  create sequence emajb.dummy2_seq;
  create sequence emajb.dummy3_log_seq;
  create sequence emaj.emaj_dummy4_seq;                  -- this one is not detected
  select * from emaj.emaj_verify_all();
                                                                emaj_verify_all                                                                
-----------------------------------------------------------------------------------------------------------------------------------------------
 Warning: Some E-Maj event triggers exist but are disabled. You may enable them using the emaj_enable_protection_by_event_triggers() function.
 In schema "emaj", the table "emaj"."dummy1_log" is not linked to any created tables group.
 In schema "emaj", the sequence "emaj"."dummy1_log_col1_seq" is not linked to any created tables group.
 In schema "emajb", the sequence "emajb"."dummy2_seq" is not linked to any created tables group.
 In schema "emajb", the sequence "emajb"."dummy3_log_seq" is not linked to any created tables group.
(5 rows)

rollback;
-- detection of unattended types in E-Maj schemas
begin;
  create type emaj.dummy1_type as (col1 int);
  create type emajb.dummy2_type as (col1 int);
  create type emajb.dummy3_type as (col1 int);
  create type emaj.emaj_dummy4_type as (col1 int);       -- this one is not detected
  select * from emaj.emaj_verify_all();
                                                                emaj_verify_all                                                                
-----------------------------------------------------------------------------------------------------------------------------------------------
 Warning: Some E-Maj event triggers exist but are disabled. You may enable them using the emaj_enable_protection_by_event_triggers() function.
 In schema "emaj", the type "emaj"."dummy1_type" is not an E-Maj component.
 In schema "emajb", the type "emajb"."dummy2_type" is not an E-Maj component.
 In schema "emajb", the type "emajb"."dummy3_type" is not an E-Maj component.
(4 rows)

rollback;
-- detection of unattended views in E-Maj schemas
begin;
  create view emaj.dummy1_view as select hist_id, hist_function, hist_event, hist_object from emaj.emaj_hist;
  create view emaj.dummy2_view as select hist_id, hist_function, hist_event, hist_object from emaj.emaj_hist;
  select * from emaj.emaj_verify_all();
                                                                emaj_verify_all                                                                
-----------------------------------------------------------------------------------------------------------------------------------------------
 Warning: Some E-Maj event triggers exist but are disabled. You may enable them using the emaj_enable_protection_by_event_triggers() function.
 In schema "emaj", the view "emaj"."dummy1_view" is not an E-Maj component.
 In schema "emaj", the view "emaj"."dummy2_view" is not an E-Maj component.
(3 rows)

rollback;
-- detection of unattended foreign tables in E-Maj schemas
-- (this only gives pertinent results with postgres 9.1+ version)
begin;
  create extension file_fdw;
  create foreign data wrapper file handler file_fdw_handler;
  create server file_server foreign data wrapper file;
  create foreign table emaj.dummy1_ftbl (ligne TEXT) server file_server options(filename '/tmp/emaj_test/log_snaps/_INFO');
  create foreign table emaj.dummy2_ftbl (ligne TEXT) server file_server options(filename '/tmp/emaj_test/log_snaps/_INFO');
  select * from emaj.emaj_verify_all();
                                                                emaj_verify_all                                                                
-----------------------------------------------------------------------------------------------------------------------------------------------
 Warning: Some E-Maj event triggers exist but are disabled. You may enable them using the emaj_enable_protection_by_event_triggers() function.
 In schema "emaj", the foreign table "emaj"."dummy1_ftbl" is not an E-Maj component.
 In schema "emaj", the foreign table "emaj"."dummy2_ftbl" is not an E-Maj component.
(3 rows)

rollback;
-- detection of unattended domains in E-Maj schemas
begin;
  create domain "emajC".dummy1_domain as int check (VALUE > 0);
  create domain "emajC".dummy2_domain as int check (VALUE > 0);
  select * from emaj.emaj_verify_all();
                                                                emaj_verify_all                                                                
-----------------------------------------------------------------------------------------------------------------------------------------------
 Warning: Some E-Maj event triggers exist but are disabled. You may enable them using the emaj_enable_protection_by_event_triggers() function.
 In schema "emajC", the domain "emajC"."dummy1_domain" is not an E-Maj component.
 In schema "emajC", the domain "emajC"."dummy2_domain" is not an E-Maj component.
(3 rows)

rollback;
-- tests on groups errors
-- detection of too old group
begin;
  update emaj.emaj_group set group_pg_version = '8.0.0' where group_name = 'myGroup1';
  select * from emaj.emaj_verify_all();
                                                                emaj_verify_all                                                                
-----------------------------------------------------------------------------------------------------------------------------------------------
 Warning: Some E-Maj event triggers exist but are disabled. You may enable them using the emaj_enable_protection_by_event_triggers() function.
 The group "myGroup1" has been created with a non compatible postgresql version (8.0.0). It must be dropped and recreated.
(2 rows)

rollback;
-- detection of a missing application schema
begin;
  drop schema myschema1 cascade;
NOTICE:  drop cascades to 6 other objects
DETAIL:  drop cascades to table myschema1.mytbl1
drop cascades to table myschema1.mytbl2
drop cascades to table myschema1."myTbl3"
drop cascades to table myschema1.mytbl4
drop cascades to table myschema1.mytbl2b
drop cascades to function myschema1.mytbl2trgfct()
  select * from emaj.emaj_verify_all();
                                                                emaj_verify_all                                                                
-----------------------------------------------------------------------------------------------------------------------------------------------
 Warning: Some E-Maj event triggers exist but are disabled. You may enable them using the emaj_enable_protection_by_event_triggers() function.
 The application schema "myschema1" does not exist any more.
 In group "myGroup1", the table "myschema1"."mytbl1" does not exist any more.
 In group "myGroup1", the table "myschema1"."mytbl2" does not exist any more.
 In group "myGroup1", the table "myschema1"."mytbl2b" does not exist any more.
 In group "myGroup1", the sequence "myschema1"."mytbl2b_col20_seq" does not exist any more.
 In group "myGroup1", the table "myschema1"."myTbl3" does not exist any more.
 In group "myGroup1", the sequence "myschema1"."myTbl3_col31_seq" does not exist any more.
 In group "myGroup1", the table "myschema1"."mytbl4" does not exist any more.
(9 rows)

rollback;
-- detection of a missing application relation
begin;
  drop table myschema1.mytbl4;
  select * from emaj.emaj_verify_all();
                                                                emaj_verify_all                                                                
-----------------------------------------------------------------------------------------------------------------------------------------------
 Warning: Some E-Maj event triggers exist but are disabled. You may enable them using the emaj_enable_protection_by_event_triggers() function.
 In group "myGroup1", the table "myschema1"."mytbl4" does not exist any more.
(2 rows)

rollback;
-- detection of relation type change (a table is now a sequence!)
begin;
  update emaj.emaj_relation set rel_kind = 'S' where rel_schema = 'myschema1' and rel_tblseq = 'mytbl1' and upper_inf(rel_time_range);
  select * from emaj.emaj_verify_all();
                                                                emaj_verify_all                                                                
-----------------------------------------------------------------------------------------------------------------------------------------------
 Warning: Some E-Maj event triggers exist but are disabled. You may enable them using the emaj_enable_protection_by_event_triggers() function.
 In group "myGroup1", the sequence "myschema1"."mytbl1" does not exist any more.
(2 rows)

rollback;
-- detection of a missing E-Maj secondary schema
begin;
  drop schema emajb cascade;
NOTICE:  drop cascades to 4 other objects
DETAIL:  drop cascades to table emajb.myschema1_mytbl2b_log
drop cascades to sequence emajb.myschema1_mytbl2b_log_seq
drop cascades to function emajb.myschema1_mytbl2b_log_fnct()
drop cascades to trigger emaj_log_trg on table myschema1.mytbl2b
  select * from emaj.emaj_verify_all();
                                                                emaj_verify_all                                                                
-----------------------------------------------------------------------------------------------------------------------------------------------
 Warning: Some E-Maj event triggers exist but are disabled. You may enable them using the emaj_enable_protection_by_event_triggers() function.
 The E-Maj schema "emajb" does not exist any more.
 In group "myGroup1", the log table "emajb"."myschema1_mytbl2b_log" is not found.
 In group "myGroup1", the log function "emajb"."myschema1_mytbl2b_log_fnct" is not found.
 In group "myGroup1", the log trigger "emaj_log_trg" on table "myschema1"."mytbl2b" is not found.
(5 rows)

rollback;
-- detection of a missing log trigger
begin;
  drop trigger emaj_log_trg on myschema1.mytbl1;
  select * from emaj.emaj_verify_all();
                                                                emaj_verify_all                                                                
-----------------------------------------------------------------------------------------------------------------------------------------------
 Warning: Some E-Maj event triggers exist but are disabled. You may enable them using the emaj_enable_protection_by_event_triggers() function.
 In group "myGroup1", the log trigger "emaj_log_trg" on table "myschema1"."mytbl1" is not found.
(2 rows)

rollback;
-- detection of a missing log function (and trigger)
begin;
  drop function emaj.myschema1_mytbl1_log_fnct() cascade;
NOTICE:  drop cascades to trigger emaj_log_trg on table myschema1.mytbl1
  select * from emaj.emaj_verify_all();
                                                                emaj_verify_all                                                                
-----------------------------------------------------------------------------------------------------------------------------------------------
 Warning: Some E-Maj event triggers exist but are disabled. You may enable them using the emaj_enable_protection_by_event_triggers() function.
 In group "myGroup1", the log function "emaj"."myschema1_mytbl1_log_fnct" is not found.
 In group "myGroup1", the log trigger "emaj_log_trg" on table "myschema1"."mytbl1" is not found.
(3 rows)

rollback;
-- detection of a missing truncate trigger
begin;
  drop trigger emaj_trunc_trg on myschema1.mytbl1;
  select * from emaj.emaj_verify_all();
                                                                emaj_verify_all                                                                
-----------------------------------------------------------------------------------------------------------------------------------------------
 Warning: Some E-Maj event triggers exist but are disabled. You may enable them using the emaj_enable_protection_by_event_triggers() function.
 In group "myGroup1", the truncate trigger "emaj_trunc_trg" on table "myschema1"."mytbl1" is not found.
(2 rows)

rollback;
-- detection of a missing log table
begin;
  drop table emaj.myschema1_mytbl1_log;
  select * from emaj.emaj_verify_all();
                                                                emaj_verify_all                                                                
-----------------------------------------------------------------------------------------------------------------------------------------------
 Warning: Some E-Maj event triggers exist but are disabled. You may enable them using the emaj_enable_protection_by_event_triggers() function.
 In group "myGroup1", the log table "emaj"."myschema1_mytbl1_log" is not found.
(2 rows)

rollback;
-- detection of a change in the application table structure (new column)
begin;
  alter table myschema1.mytbl1 add column newcol int;
  alter table myschema1.mytbl1 add column othernewcol text;
  alter table myschema1.mytbl2 add column newcol int;
  select * from emaj.emaj_verify_all();
                                                                   emaj_verify_all                                                                    
------------------------------------------------------------------------------------------------------------------------------------------------------
 Warning: Some E-Maj event triggers exist but are disabled. You may enable them using the emaj_enable_protection_by_event_triggers() function.
 In group "myGroup1", the structure of the application table "myschema1"."mytbl1" is not coherent with its log table ("emaj"."myschema1_mytbl1_log").
 In group "myGroup1", the structure of the application table "myschema1"."mytbl2" is not coherent with its log table ("emaj"."myschema1_mytbl2_log").
(3 rows)

rollback;
-- detection of a change in the application table structure (column type change)
begin;
  alter table myschema1.mytbl4 drop column col42;
  alter table myschema1.mytbl4 alter column col45 type varchar(15);
  select * from emaj.emaj_verify_all();
                                                                   emaj_verify_all                                                                    
------------------------------------------------------------------------------------------------------------------------------------------------------
 Warning: Some E-Maj event triggers exist but are disabled. You may enable them using the emaj_enable_protection_by_event_triggers() function.
 In group "myGroup1", the structure of the application table "myschema1"."mytbl4" is not coherent with its log table ("emaj"."myschema1_mytbl4_log").
(2 rows)

rollback;
-- detection of missing primary key on tables belonging to a rollbackable group
begin;
  alter table myschema1.mytbl4 drop constraint mytbl4_pkey;                   -- table from a rollbackable group
  alter table "phil's schema3".mytbl4 drop constraint mytbl4_pkey cascade;    -- table from an audit_only group
NOTICE:  drop cascades to constraint mytbl2_col21_fkey on table "phil's schema3"."myTbl2\"
  select * from emaj.emaj_verify_all();
                                                                emaj_verify_all                                                                
-----------------------------------------------------------------------------------------------------------------------------------------------
 Warning: Some E-Maj event triggers exist but are disabled. You may enable them using the emaj_enable_protection_by_event_triggers() function.
 In rollbackable group "myGroup1", the table "myschema1"."mytbl4" has no primary key any more.
(2 rows)

rollback;
-- detection of tables altered as UNLOGGED
begin;
  alter table "phil's schema3"."myTbl2\" set unlogged;                        -- needs 9.5+
ERROR:  syntax error at or near "unlogged"
LINE 1: alter table "phil's schema3"."myTbl2\" set unlogged;
                                                   ^
  select * from emaj.emaj_verify_all();
ERROR:  current transaction is aborted, commands ignored until end of transaction block
rollback;
-- detection of tables altered as WITH OIDS
begin;
  alter table "phil's schema3"."myTbl2\" set with oids;
  select * from emaj.emaj_verify_all();
                                                                emaj_verify_all                                                                
-----------------------------------------------------------------------------------------------------------------------------------------------
 Warning: Some E-Maj event triggers exist but are disabled. You may enable them using the emaj_enable_protection_by_event_triggers() function.
 In rollbackable group "phil's group#3",", the table "phil's schema3"."myTbl2\" is WITH OIDS.
(2 rows)

rollback;
-- all in 1
begin;
  create table emaj.dummy_log (col1 int);
  create function emaj.dummy_log_fnct () returns int language sql as $$ select 0 $$;
  create function emaj.dummy_rlbk_fnct () returns int language sql as $$ select 0 $$;
  update emaj.emaj_group set group_pg_version = '8.0.0' where group_name = 'myGroup1';
  drop trigger emaj_log_trg on myschema1.mytbl1;
  drop function emaj.myschema1_mytbl1_log_fnct() cascade;
  drop table emaj.myschema1_mytbl1_log;
  alter table myschema1.mytbl1 add column newcol int;
  update emaj.emaj_relation set rel_kind = 'S' where rel_schema = 'myschema2' and rel_tblseq = 'mytbl1' and upper_inf(rel_time_range);
  alter table myschema1.mytbl4 drop constraint mytbl4_pkey;
  alter table "phil's schema3"."myTbl2\" set with oids;
  select * from emaj.emaj_verify_all();
                                                                emaj_verify_all                                                                
-----------------------------------------------------------------------------------------------------------------------------------------------
 Warning: Some E-Maj event triggers exist but are disabled. You may enable them using the emaj_enable_protection_by_event_triggers() function.
 In schema "emaj", the table "emaj"."dummy_log" is not linked to any created tables group.
 In schema "emaj", the function "emaj"."dummy_log_fnct" is not linked to any created tables group.
 In schema "emaj", the function "emaj"."dummy_rlbk_fnct" is not linked to any created tables group.
 The group "myGroup1" has been created with a non compatible postgresql version (8.0.0). It must be dropped and recreated.
 In group "myGroup2", the sequence "myschema2"."mytbl1" does not exist any more.
 In group "myGroup1", the log table "emaj"."myschema1_mytbl1_log" is not found.
 In group "myGroup1", the log function "emaj"."myschema1_mytbl1_log_fnct" is not found.
 In group "myGroup1", the log trigger "emaj_log_trg" on table "myschema1"."mytbl1" is not found.
 In rollbackable group "myGroup1", the table "myschema1"."mytbl4" has no primary key any more.
 In rollbackable group "phil's group#3",", the table "phil's schema3"."myTbl2\" is WITH OIDS.
(11 rows)

rollback;
--------------------------------
-- User errors and recovery tests 
--------------------------------
SET client_min_messages TO WARNING;
-- cases when an application table is altered
begin;
  alter table myschema2.mytbl4 add column newcol int;
-- setting a mark or rollbacking fails
  savepoint sp1;
    select emaj.emaj_set_mark_group('myGroup2','dummyMark');
ERROR:  _verify_groups (6): In group "myGroup2", the structure of the application table "myschema2"."mytbl4" is not coherent with its log table ("emaj"."myschema2_mytbl4_log"). You may use "SELECT * FROM emaj.emaj_verify_all()" to look for other issues.
CONTEXT:  SQL statement "SELECT 0 FROM emaj._verify_groups(array[v_groupName], TRUE)"
PL/pgSQL function emaj.emaj_set_mark_group(text,text) line 17 at PERFORM
  rollback to savepoint sp1;
    select emaj.emaj_rollback_group('myGroup2','EMAJ_LAST_MARK');
ERROR:  _verify_groups (6): In group "myGroup2", the structure of the application table "myschema2"."mytbl4" is not coherent with its log table ("emaj"."myschema2_mytbl4_log"). You may use "SELECT * FROM emaj.emaj_verify_all()" to look for other issues.
CONTEXT:  SQL statement "SELECT 0 FROM emaj._verify_groups(v_groupNames, TRUE)"
PL/pgSQL function emaj._rlbk_init(text[],text,boolean,integer,boolean,boolean) line 25 at PERFORM
SQL statement "SELECT emaj._rlbk_init(v_groupNames, v_mark, v_isLoggedRlbk, 1, v_multiGroup, v_isAlterGroupAllowed)"
PL/pgSQL function emaj._rlbk_groups(text[],text,boolean,boolean,boolean) line 22 at SQL statement
SQL statement "SELECT rlbk_message::INT FROM emaj._rlbk_groups(array[v_groupName], v_mark, FALSE, FALSE, NULL) WHERE rlbk_severity = 'Notice'"
PL/pgSQL function emaj.emaj_rollback_group(text,text) line 7 at RETURN
  rollback to savepoint sp1;
-- but it is possible to stop, drop and recreate the group
  select emaj.emaj_stop_group('myGroup2');
 emaj_stop_group 
-----------------
               8
(1 row)

  savepoint sp2;
    select emaj.emaj_drop_group('myGroup2');
 emaj_drop_group 
-----------------
               8
(1 row)

    select emaj.emaj_create_group('myGroup2');
WARNING:  _check_fk_groups: The foreign key "mytbl6_col61_fkey" on the table "myschema2.mytbl6" references the table "myschema2.mytbl7" that is outside the groups (myGroup2).
CONTEXT:  SQL statement "SELECT emaj._check_fk_groups(array[v_groupName])"
PL/pgSQL function emaj.emaj_create_group(text,boolean,boolean) line 75 at PERFORM
WARNING:  _check_fk_groups: The table "myschema2.mytbl6" is referenced by the foreign key "mytbl8_col81_fkey" on the table "myschema2.mytbl8" that is outside the groups (myGroup2).
CONTEXT:  SQL statement "SELECT emaj._check_fk_groups(array[v_groupName])"
PL/pgSQL function emaj.emaj_create_group(text,boolean,boolean) line 75 at PERFORM
 emaj_create_group 
-------------------
                 8
(1 row)

  rollback to savepoint sp2;
-- or stop and alter the group
  select emaj.emaj_alter_group('myGroup2');
WARNING:  _check_fk_groups: The foreign key "mytbl6_col61_fkey" on the table "myschema2.mytbl6" references the table "myschema2.mytbl7" that is outside the groups (myGroup2).
CONTEXT:  SQL statement "SELECT emaj._check_fk_groups(v_groupNames)"
PL/pgSQL function emaj._alter_groups(text[],boolean,text) line 56 at PERFORM
PL/pgSQL function emaj.emaj_alter_group(text,text) line 6 at RETURN
WARNING:  _check_fk_groups: The table "myschema2.mytbl6" is referenced by the foreign key "mytbl8_col81_fkey" on the table "myschema2.mytbl8" that is outside the groups (myGroup2).
CONTEXT:  SQL statement "SELECT emaj._check_fk_groups(v_groupNames)"
PL/pgSQL function emaj._alter_groups(text[],boolean,text) line 56 at PERFORM
PL/pgSQL function emaj.emaj_alter_group(text,text) line 6 at RETURN
 emaj_alter_group 
------------------
                8
(1 row)

rollback;
-- cases when an application table is dropped
begin;
  drop table myschema2.mytbl4;
-- stopping group fails
  savepoint sp1;
    select emaj.emaj_stop_group('myGroup2');
ERROR:  _stop_groups: The table "myschema2.mytbl4" does not exist any more.
CONTEXT:  PL/pgSQL function emaj.emaj_stop_group(text,text) line 10 at RETURN
  rollback to savepoint sp1;
-- the only solution is to change the emaj_group_def table, force the group's stop and recreate or alter the group
  delete from emaj.emaj_group_def where grpdef_schema = 'myschema2' and grpdef_tblseq = 'mytbl4';
  select emaj.emaj_force_stop_group('myGroup2');
WARNING:  _stop_groups: The table "myschema2.mytbl4" does not exist any more.
CONTEXT:  PL/pgSQL function emaj.emaj_force_stop_group(text) line 9 at RETURN
 emaj_force_stop_group 
-----------------------
                     8
(1 row)

  select emaj.emaj_drop_group('myGroup2');
 emaj_drop_group 
-----------------
               8
(1 row)

  select emaj.emaj_create_group('myGroup2');
WARNING:  _check_fk_groups: The foreign key "mytbl6_col61_fkey" on the table "myschema2.mytbl6" references the table "myschema2.mytbl7" that is outside the groups (myGroup2).
CONTEXT:  SQL statement "SELECT emaj._check_fk_groups(array[v_groupName])"
PL/pgSQL function emaj.emaj_create_group(text,boolean,boolean) line 75 at PERFORM
WARNING:  _check_fk_groups: The table "myschema2.mytbl6" is referenced by the foreign key "mytbl8_col81_fkey" on the table "myschema2.mytbl8" that is outside the groups (myGroup2).
CONTEXT:  SQL statement "SELECT emaj._check_fk_groups(array[v_groupName])"
PL/pgSQL function emaj.emaj_create_group(text,boolean,boolean) line 75 at PERFORM
 emaj_create_group 
-------------------
                 7
(1 row)

-- and everything is clean...
  select * from emaj.emaj_verify_all();
                                                                emaj_verify_all                                                                
-----------------------------------------------------------------------------------------------------------------------------------------------
 Warning: Some E-Maj event triggers exist but are disabled. You may enable them using the emaj_enable_protection_by_event_triggers() function.
 No error detected
(2 rows)

rollback;
-- cases when a log trigger on an application table is dropped
begin;
  drop trigger emaj_log_trg on myschema2.mytbl4;
-- stopping group fails
  savepoint sp1;
    select emaj.emaj_stop_group('myGroup2');
ERROR:  _stop_groups: The log trigger "emaj_log_trg" on table "myschema2.mytbl4" does not exist any more.
CONTEXT:  PL/pgSQL function emaj.emaj_stop_group(text,text) line 10 at RETURN
  rollback to savepoint sp1;
-- the only solution is to change the emaj_group_def table, force the group's stop and recreate or alter the group
  delete from emaj.emaj_group_def where grpdef_schema = 'myschema2' and grpdef_tblseq = 'mytbl4';
  select emaj.emaj_force_stop_group('myGroup2');
WARNING:  _stop_groups: The log trigger "emaj_log_trg" on table "myschema2.mytbl4" does not exist any more.
CONTEXT:  PL/pgSQL function emaj.emaj_force_stop_group(text) line 9 at RETURN
 emaj_force_stop_group 
-----------------------
                     8
(1 row)

  select emaj.emaj_alter_group('myGroup2');
WARNING:  _check_fk_groups: The foreign key "mytbl6_col61_fkey" on the table "myschema2.mytbl6" references the table "myschema2.mytbl7" that is outside the groups (myGroup2).
CONTEXT:  SQL statement "SELECT emaj._check_fk_groups(v_groupNames)"
PL/pgSQL function emaj._alter_groups(text[],boolean,text) line 56 at PERFORM
PL/pgSQL function emaj.emaj_alter_group(text,text) line 6 at RETURN
WARNING:  _check_fk_groups: The table "myschema2.mytbl2" is referenced by the foreign key "mytbl4_col43_fkey" on the table "myschema2.mytbl4" that is outside the groups (myGroup2).
CONTEXT:  SQL statement "SELECT emaj._check_fk_groups(v_groupNames)"
PL/pgSQL function emaj._alter_groups(text[],boolean,text) line 56 at PERFORM
PL/pgSQL function emaj.emaj_alter_group(text,text) line 6 at RETURN
WARNING:  _check_fk_groups: The table "myschema2.mytbl1" is referenced by the foreign key "mytbl4_col44_fkey" on the table "myschema2.mytbl4" that is outside the groups (myGroup2).
CONTEXT:  SQL statement "SELECT emaj._check_fk_groups(v_groupNames)"
PL/pgSQL function emaj._alter_groups(text[],boolean,text) line 56 at PERFORM
PL/pgSQL function emaj.emaj_alter_group(text,text) line 6 at RETURN
WARNING:  _check_fk_groups: The table "myschema2.mytbl6" is referenced by the foreign key "mytbl8_col81_fkey" on the table "myschema2.mytbl8" that is outside the groups (myGroup2).
CONTEXT:  SQL statement "SELECT emaj._check_fk_groups(v_groupNames)"
PL/pgSQL function emaj._alter_groups(text[],boolean,text) line 56 at PERFORM
PL/pgSQL function emaj.emaj_alter_group(text,text) line 6 at RETURN
 emaj_alter_group 
------------------
                7
(1 row)

-- and everything is clean...
  select * from emaj.emaj_verify_all();
                                                                emaj_verify_all                                                                
-----------------------------------------------------------------------------------------------------------------------------------------------
 Warning: Some E-Maj event triggers exist but are disabled. You may enable them using the emaj_enable_protection_by_event_triggers() function.
 No error detected
(2 rows)

rollback;
-- cases when a truncate trigger on an application table is dropped
begin;
  drop trigger emaj_trunc_trg on myschema2.mytbl4;
-- stopping group fails
  savepoint sp1;
    select emaj.emaj_stop_group('myGroup2');
ERROR:  _stop_groups: The truncate trigger "emaj_trunc_trg" on table "myschema2.mytbl4" does not exist any more.
CONTEXT:  PL/pgSQL function emaj.emaj_stop_group(text,text) line 10 at RETURN
  rollback to savepoint sp1;
-- the only solution is to change the emaj_group_def table, force the group's stop and recreate or alter the group
  delete from emaj.emaj_group_def where grpdef_schema = 'myschema2' and grpdef_tblseq = 'mytbl4';
  select emaj.emaj_force_stop_group('myGroup2');
WARNING:  _stop_groups: The truncate trigger "emaj_trunc_trg" on table "myschema2.mytbl4" does not exist any more.
CONTEXT:  PL/pgSQL function emaj.emaj_force_stop_group(text) line 9 at RETURN
 emaj_force_stop_group 
-----------------------
                     8
(1 row)

  select emaj.emaj_alter_group('myGroup2');
WARNING:  _check_fk_groups: The foreign key "mytbl6_col61_fkey" on the table "myschema2.mytbl6" references the table "myschema2.mytbl7" that is outside the groups (myGroup2).
CONTEXT:  SQL statement "SELECT emaj._check_fk_groups(v_groupNames)"
PL/pgSQL function emaj._alter_groups(text[],boolean,text) line 56 at PERFORM
PL/pgSQL function emaj.emaj_alter_group(text,text) line 6 at RETURN
WARNING:  _check_fk_groups: The table "myschema2.mytbl2" is referenced by the foreign key "mytbl4_col43_fkey" on the table "myschema2.mytbl4" that is outside the groups (myGroup2).
CONTEXT:  SQL statement "SELECT emaj._check_fk_groups(v_groupNames)"
PL/pgSQL function emaj._alter_groups(text[],boolean,text) line 56 at PERFORM
PL/pgSQL function emaj.emaj_alter_group(text,text) line 6 at RETURN
WARNING:  _check_fk_groups: The table "myschema2.mytbl1" is referenced by the foreign key "mytbl4_col44_fkey" on the table "myschema2.mytbl4" that is outside the groups (myGroup2).
CONTEXT:  SQL statement "SELECT emaj._check_fk_groups(v_groupNames)"
PL/pgSQL function emaj._alter_groups(text[],boolean,text) line 56 at PERFORM
PL/pgSQL function emaj.emaj_alter_group(text,text) line 6 at RETURN
WARNING:  _check_fk_groups: The table "myschema2.mytbl6" is referenced by the foreign key "mytbl8_col81_fkey" on the table "myschema2.mytbl8" that is outside the groups (myGroup2).
CONTEXT:  SQL statement "SELECT emaj._check_fk_groups(v_groupNames)"
PL/pgSQL function emaj._alter_groups(text[],boolean,text) line 56 at PERFORM
PL/pgSQL function emaj.emaj_alter_group(text,text) line 6 at RETURN
 emaj_alter_group 
------------------
                7
(1 row)

-- and everything is clean...
  select * from emaj.emaj_verify_all();
                                                                emaj_verify_all                                                                
-----------------------------------------------------------------------------------------------------------------------------------------------
 Warning: Some E-Maj event triggers exist but are disabled. You may enable them using the emaj_enable_protection_by_event_triggers() function.
 No error detected
(2 rows)

rollback;
-- cases when an application sequence is dropped
begin;
  drop sequence myschema2.mySeq1;
-- setting a mark or stopping the group fails
-- the only solution is to change the emaj_group_def table, force the group's stop and recreate or alter the group
  delete from emaj.emaj_group_def where grpdef_schema = 'myschema2' and grpdef_tblseq = 'myseq1';
  select emaj.emaj_force_stop_group('myGroup2');
 emaj_force_stop_group 
-----------------------
                     8
(1 row)

  select emaj.emaj_alter_group('myGroup2');
WARNING:  _check_fk_groups: The foreign key "mytbl6_col61_fkey" on the table "myschema2.mytbl6" references the table "myschema2.mytbl7" that is outside the groups (myGroup2).
CONTEXT:  SQL statement "SELECT emaj._check_fk_groups(v_groupNames)"
PL/pgSQL function emaj._alter_groups(text[],boolean,text) line 56 at PERFORM
PL/pgSQL function emaj.emaj_alter_group(text,text) line 6 at RETURN
WARNING:  _check_fk_groups: The table "myschema2.mytbl6" is referenced by the foreign key "mytbl8_col81_fkey" on the table "myschema2.mytbl8" that is outside the groups (myGroup2).
CONTEXT:  SQL statement "SELECT emaj._check_fk_groups(v_groupNames)"
PL/pgSQL function emaj._alter_groups(text[],boolean,text) line 56 at PERFORM
PL/pgSQL function emaj.emaj_alter_group(text,text) line 6 at RETURN
 emaj_alter_group 
------------------
                7
(1 row)

-- and everything is clean...
  select * from emaj.emaj_verify_all();
                                                                emaj_verify_all                                                                
-----------------------------------------------------------------------------------------------------------------------------------------------
 Warning: Some E-Maj event triggers exist but are disabled. You may enable them using the emaj_enable_protection_by_event_triggers() function.
 No error detected
(2 rows)

rollback;
-- cases when an application schema is dropped
begin;
  drop schema myschema2 cascade;
-- stopping group fails
  savepoint sp1;
    select emaj.emaj_stop_group('myGroup2');
ERROR:  _stop_groups: The schema "myschema2" does not exist any more.
CONTEXT:  PL/pgSQL function emaj.emaj_stop_group(text,text) line 10 at RETURN
  rollback to savepoint sp1;
-- the only solution is to force the group's stop and drop the group
  select emaj.emaj_force_stop_group('myGroup2');
WARNING:  _stop_groups: The schema "myschema2" does not exist any more.
CONTEXT:  PL/pgSQL function emaj.emaj_force_stop_group(text) line 9 at RETURN
WARNING:  _stop_groups: The table "myschema2.mytbl1" does not exist any more.
CONTEXT:  PL/pgSQL function emaj.emaj_force_stop_group(text) line 9 at RETURN
WARNING:  _stop_groups: The table "myschema2.mytbl2" does not exist any more.
CONTEXT:  PL/pgSQL function emaj.emaj_force_stop_group(text) line 9 at RETURN
WARNING:  _stop_groups: The table "myschema2.myTbl3" does not exist any more.
CONTEXT:  PL/pgSQL function emaj.emaj_force_stop_group(text) line 9 at RETURN
WARNING:  _stop_groups: The table "myschema2.mytbl4" does not exist any more.
CONTEXT:  PL/pgSQL function emaj.emaj_force_stop_group(text) line 9 at RETURN
WARNING:  _stop_groups: The table "myschema2.mytbl5" does not exist any more.
CONTEXT:  PL/pgSQL function emaj.emaj_force_stop_group(text) line 9 at RETURN
WARNING:  _stop_groups: The table "myschema2.mytbl6" does not exist any more.
CONTEXT:  PL/pgSQL function emaj.emaj_force_stop_group(text) line 9 at RETURN
 emaj_force_stop_group 
-----------------------
                     8
(1 row)

  select emaj.emaj_drop_group('myGroup2');
 emaj_drop_group 
-----------------
               8
(1 row)

-- and everything is clean...
  select * from emaj.emaj_verify_all();
                                                                emaj_verify_all                                                                
-----------------------------------------------------------------------------------------------------------------------------------------------
 Warning: Some E-Maj event triggers exist but are disabled. You may enable them using the emaj_enable_protection_by_event_triggers() function.
 No error detected
(2 rows)

rollback;
-- cases when non E-Maj related objects are stored in emaj secondary schemas
begin;
  create sequence emajb.dummySeq;
-- dropping group fails at secondary schema drop step
  select emaj.emaj_stop_group('myGroup1');
 emaj_stop_group 
-----------------
               7
(1 row)

  savepoint sp1;
    select emaj.emaj_drop_group('myGroup1');
ERROR:  _drop_log_schemas: Cannot drop the schema "emajb". It probably owns unattended objects. Use the emaj_verify_all() function to get details.
CONTEXT:  SQL statement "SELECT emaj._drop_log_schemas(CASE WHEN v_isForced THEN 'FORCE_DROP_GROUP' ELSE 'DROP_GROUP' END, v_isForced)"
PL/pgSQL function emaj._drop_group(text,boolean) line 29 at PERFORM
SQL statement "SELECT emaj._drop_group(v_groupName, FALSE)"
PL/pgSQL function emaj.emaj_drop_group(text) line 14 at SQL statement
  rollback to savepoint sp1;
-- use emaj_verify_all() to understand the problem
  select * from emaj.emaj_verify_all();
                                                                emaj_verify_all                                                                
-----------------------------------------------------------------------------------------------------------------------------------------------
 Warning: Some E-Maj event triggers exist but are disabled. You may enable them using the emaj_enable_protection_by_event_triggers() function.
 In schema "emajb", the sequence "emajb"."dummyseq" is not linked to any created tables group.
(2 rows)

-- use emaj_force_drop_group to solve the problem
  select emaj.emaj_force_drop_group('myGroup1');
 emaj_force_drop_group 
-----------------------
                     7
(1 row)

-- and everything is clean...
  select * from emaj.emaj_verify_all();
                                                                emaj_verify_all                                                                
-----------------------------------------------------------------------------------------------------------------------------------------------
 Warning: Some E-Maj event triggers exist but are disabled. You may enable them using the emaj_enable_protection_by_event_triggers() function.
 No error detected
(2 rows)

rollback;
-----------------------------
-- test event triggers
-----------------------------
-- disable twice event trigger (already disabled at the beginning of the createDrop.sql script)
select emaj.emaj_disable_protection_by_event_triggers();
 emaj_disable_protection_by_event_triggers 
-------------------------------------------
                                         0
(1 row)

-- enable twice
select emaj.emaj_enable_protection_by_event_triggers();
 emaj_enable_protection_by_event_triggers 
------------------------------------------
                                        2
(1 row)

select emaj.emaj_enable_protection_by_event_triggers();
 emaj_enable_protection_by_event_triggers 
------------------------------------------
                                        0
(1 row)

-- drop or alter various E-Maj components
--
-- drop application components (the related tables group is currently in logging state)
begin;
  drop table myschema1.mytbl1 cascade;
ERROR:  E-Maj event trigger: Attempting to drop the application table "myschema1.mytbl1". But it belongs to the active tables group "myGroup1".
rollback;
begin;
  drop sequence myschema2.mySeq1;
ERROR:  E-Maj event trigger: Attempting to drop the application sequence "myschema2.myseq1". But it belongs to the active tables group "myGroup2".
rollback;
begin;
  drop schema myschema1 cascade;
ERROR:  E-Maj event trigger: Attempting to drop the application schema "myschema1". But it belongs to the active tables groups "myGroup1".
rollback;
-- drop emaj components
begin;
  drop table "emajC"."myschema1_myTbl3_log";
ERROR:  E-Maj event trigger: Attempting to drop the log table "emajC.myschema1_myTbl3_log". But dropping an E-Maj log table is not allowed.
rollback;
begin;
  drop sequence emaj.myschema1_mytbl1_log_seq;
ERROR:  E-Maj event trigger: Attempting to drop the log sequence "emaj.myschema1_mytbl1_log_seq". But dropping an E-Maj sequence is not allowed.
rollback;
begin;
  drop function "emajC"."myschema1_myTbl3_log_fnct"() cascade;
ERROR:  E-Maj event trigger: Attempting to drop the log function ""emajC"."myschema1_myTbl3_log_fnct"()". But dropping an E-Maj log function is not allowed.
rollback;
begin;
  drop trigger emaj_log_trg on myschema1.mytbl1;
rollback;
begin;
  drop schema emaj cascade;
ERROR:  E-Maj event trigger: Attempting to drop the schema "emaj". Please use the emaj_uninstall.sql script if you really want to remove all E-Maj components.
rollback;
begin;
  drop schema emajb cascade;
ERROR:  E-Maj event trigger: Attempting to drop the schema "emajb". But dropping an E-Maj schema is not allowed.
rollback;
begin;
  drop extension emaj cascade;
ERROR:  E-Maj event trigger: Attempting to drop the emaj extension. Please use the emaj_uninstall.sql script if you really want to remove all E-Maj components.
rollback;
-- change a table structure that leads to a table rewrite
begin;
  alter table myschema1.mytbl1 add column newcol int default 1;
rollback;
begin;
  alter table emaj.myschema1_mytbl1_log add column newcol int default 1;
rollback;
-- rename a table and/or change its schema (not covered by event triggers in pg9.6-)
begin;
  alter table myschema1.mytbl1 rename to mytbl1_new_name;
  alter table myschema1.mytbl1_new_name set schema public;
  alter schema myschema1 rename to renamed_myschema1;
rollback;
-- change a table structure that doesn't lead to a table rewrite (not covered by event triggers in pg9.6-)
begin;
  alter table myschema1.mytbl1 add column another_newcol boolean;
rollback;
-- perform changes on application components with the related tables group stopped (the event triggers should accept)
begin;
  select emaj.emaj_stop_groups(array['myGroup1','myGroup2']);
 emaj_stop_groups 
------------------
               15
(1 row)

  alter table myschema1.mytbl1 add column newcol int default 1;
  drop table myschema1.mytbl1 cascade;
  drop sequence myschema2.mySeq1;
rollback;
-- missing event triggers
begin;
  drop event trigger emaj_protection_trg;
  select emaj.emaj_verify_all();
                                                                      emaj_verify_all                                                                      
-----------------------------------------------------------------------------------------------------------------------------------------------------------
 Warning: Some E-Maj event triggers are missing. Your database administrator may (re)create them using the emaj_upgrade_after_postgres_upgrade.sql script.
 No error detected
(2 rows)

rollback;
-- finaly leave the event triggers enabled
-----------------------------
-- test a table reclustering (it will use the pkey index as clustered index) and a vacuum full
-----------------------------
cluster emaj.myschema1_mytbl1_log;
vacuum full emaj.myschema1_mytbl1_log;
-----------------------------
-- test end: check, reset history and force sequences id
-----------------------------
select hist_id, hist_function, hist_event, hist_object, regexp_replace(regexp_replace(hist_wording,E'\\d\\d\.\\d\\d\\.\\d\\d\\.\\d\\d\\d','%','g'),E'\\[.+\\]','(timestamp)','g'), hist_user from 
  (select * from emaj.emaj_hist where hist_id >= 5000 order by hist_id) as t;
 hist_id |   hist_function    |       hist_event        |    hist_object    |                                                   regexp_replace                                                   | hist_user 
---------+--------------------+-------------------------+-------------------+--------------------------------------------------------------------------------------------------------------------+-----------
    5003 | STOP_GROUP         | BEGIN                   | myGroup1          |                                                                                                                    | postgres
    5004 | LOCK_GROUP         | BEGIN                   | myGroup1          |                                                                                                                    | postgres
    5005 | LOCK_GROUP         | END                     | myGroup1          | 5 tables locked, 0 deadlock(s)                                                                                     | postgres
    5006 | SET_MARK_GROUP     | BEGIN                   | myGroup1          | STOP_%                                                                                                             | postgres
    5007 | SET_MARK_GROUP     | END                     | myGroup1          | STOP_%                                                                                                             | postgres
    5008 | STOP_GROUP         | END                     | myGroup1          | 7 tables/sequences processed                                                                                       | postgres
    5009 | RESET_GROUP        | BEGIN                   | myGroup1          |                                                                                                                    | postgres
    5010 | RESET_GROUP        | END                     | myGroup1          | 7 tables/sequences processed                                                                                       | postgres
    5019 | GEN_SQL_GROUP      | BEGIN                   | myGroup1          |                                                                                                                    | postgres
    5020 | GEN_SQL_GROUP      | END                     | myGroup1          | No mark in the group(s) => no file has been generated                                                              | postgres
    5021 | START_GROUP        | BEGIN                   | myGroup1          | With log reset                                                                                                     | postgres
    5022 | LOCK_GROUP         | BEGIN                   | myGroup1          |                                                                                                                    | postgres
    5023 | LOCK_GROUP         | END                     | myGroup1          | 5 tables locked, 0 deadlock(s)                                                                                     | postgres
    5024 | SET_MARK_GROUP     | BEGIN                   | myGroup1          | Mark21                                                                                                             | postgres
    5025 | SET_MARK_GROUP     | END                     | myGroup1          | Mark21                                                                                                             | postgres
    5026 | START_GROUP        | END                     | myGroup1          | 7 tables/sequences processed                                                                                       | postgres
    5027 | SET_MARK_GROUPS    | BEGIN                   | myGroup1,myGroup2 | Multi-1                                                                                                            | postgres
    5028 | LOCK_GROUPS        | BEGIN                   | myGroup1,myGroup2 |                                                                                                                    | postgres
    5029 | LOCK_GROUPS        | END                     | myGroup1,myGroup2 | 11 tables locked, 0 deadlock(s)                                                                                    | postgres
    5030 | SET_MARK_GROUPS    | END                     | myGroup1,myGroup2 | Multi-1                                                                                                            | postgres
    5031 | SET_MARK_GROUP     | BEGIN                   | myGroup2          |                                                                                                                    | postgres
    5032 | LOCK_GROUP         | BEGIN                   | myGroup2          |                                                                                                                    | postgres
    5033 | LOCK_GROUP         | END                     | myGroup2          | 6 tables locked, 0 deadlock(s)                                                                                     | postgres
    5034 | SET_MARK_GROUP     | END                     | myGroup2          | Mark22                                                                                                             | postgres
    5035 | SET_MARK_GROUPS    | BEGIN                   | myGroup1,myGroup2 | Multi-2                                                                                                            | postgres
    5036 | LOCK_GROUPS        | BEGIN                   | myGroup1,myGroup2 |                                                                                                                    | postgres
    5037 | LOCK_GROUPS        | END                     | myGroup1,myGroup2 | 11 tables locked, 0 deadlock(s)                                                                                    | postgres
    5038 | SET_MARK_GROUPS    | END                     | myGroup1,myGroup2 | Multi-2                                                                                                            | postgres
    5039 | SET_MARK_GROUP     | BEGIN                   | myGroup2          |                                                                                                                    | postgres
    5040 | LOCK_GROUP         | BEGIN                   | myGroup2          |                                                                                                                    | postgres
    5041 | LOCK_GROUP         | END                     | myGroup2          | 6 tables locked, 0 deadlock(s)                                                                                     | postgres
    5042 | SET_MARK_GROUP     | END                     | myGroup2          | Mark23                                                                                                             | postgres
    5043 | SET_MARK_GROUPS    | BEGIN                   | myGroup1,myGroup2 | Multi-3                                                                                                            | postgres
    5044 | LOCK_GROUPS        | BEGIN                   | myGroup1,myGroup2 |                                                                                                                    | postgres
    5045 | LOCK_GROUPS        | END                     | myGroup1,myGroup2 | 11 tables locked, 0 deadlock(s)                                                                                    | postgres
    5046 | SET_MARK_GROUPS    | END                     | myGroup1,myGroup2 | Multi-3                                                                                                            | postgres
    5072 | SNAP_GROUP         | BEGIN                   | emptyGroup        | /tmp/emaj_test/snaps                                                                                               | postgres
    5073 | SNAP_GROUP         | END                     | emptyGroup        | 0 tables/sequences processed                                                                                       | postgres
    5074 | SNAP_GROUP         | BEGIN                   | myGroup1          | /tmp/emaj_test/snaps                                                                                               | postgres
    5075 | SNAP_GROUP         | END                     | myGroup1          | 7 tables/sequences processed                                                                                       | postgres
    5076 | SNAP_GROUP         | BEGIN                   | myGroup1          | /tmp/emaj_test/snaps                                                                                               | postgres
    5077 | SNAP_GROUP         | END                     | myGroup1          | 7 tables/sequences processed                                                                                       | postgres
    5089 | SNAP_LOG_GROUP     | BEGIN                   | emptyGroup        | From mark EGM3 to mark EGM4 towards /tmp/emaj_test/log_snaps                                                       | postgres
    5090 | SNAP_LOG_GROUP     | END                     | emptyGroup        | 3 generated files                                                                                                  | postgres
    5091 | SNAP_LOG_GROUP     | BEGIN                   | myGroup2          | From initial mark to mark EMAJ_LAST_MARK towards /tmp/emaj_test/log_snaps                                          | postgres
    5092 | SNAP_LOG_GROUP     | END                     | myGroup2          | 9 generated files                                                                                                  | postgres
    5093 | SNAP_LOG_GROUP     | BEGIN                   | myGroup2          | From initial mark to current situation towards /tmp/emaj_test/log_snaps                                            | postgres
    5094 | SNAP_LOG_GROUP     | END                     | myGroup2          | 9 generated files                                                                                                  | postgres
    5095 | SNAP_LOG_GROUP     | BEGIN                   | myGroup2          | From mark Mark21 to current situation towards /tmp/emaj_test/log_snaps                                             | postgres
    5096 | SNAP_LOG_GROUP     | END                     | myGroup2          | 9 generated files                                                                                                  | postgres
    5097 | SNAP_LOG_GROUP     | BEGIN                   | myGroup2          | From mark Mark21 to mark Mark21 towards /tmp/emaj_test/log_snaps                                                   | postgres
    5098 | SNAP_LOG_GROUP     | END                     | myGroup2          | 3 generated files                                                                                                  | postgres
    5099 | SNAP_LOG_GROUP     | BEGIN                   | myGroup2          | From mark Mark21 to mark Mark23 towards /tmp/emaj_test/log_snaps                                                   | postgres
    5100 | SNAP_LOG_GROUP     | END                     | myGroup2          | 9 generated files                                                                                                  | postgres
    5103 | GEN_SQL_GROUPS     | BEGIN                   |                   |                                                                                                                    | postgres
    5104 | GEN_SQL_GROUPS     | END                     |                   | 0 generated statements                                                                                             | postgres
    5139 | GEN_SQL_GROUP      | BEGIN                   | emptyGroup        | From initial mark to current situation towards /tmp/emaj_test/sql_scripts/myFile                                   | postgres
    5140 | GEN_SQL_GROUP      | END                     | emptyGroup        | 0 generated statements                                                                                             | postgres
    5141 | GEN_SQL_GROUP      | BEGIN                   | myGroup2          | From initial mark to current situation towards /tmp/emaj_test/sql_scripts/myFile                                   | postgres
    5142 | GEN_SQL_GROUP      | END                     | myGroup2          | 11712 generated statements                                                                                         | postgres
    5143 | GEN_SQL_GROUP      | BEGIN                   | myGroup2          | From mark Mark21 to current situation towards /tmp/emaj_test/sql_scripts/myFile                                    | postgres
    5144 | GEN_SQL_GROUP      | END                     | myGroup2          | 11712 generated statements                                                                                         | postgres
    5145 | GEN_SQL_GROUP      | BEGIN                   | myGroup2          | From initial mark to mark Mark22 towards /tmp/emaj_test/sql_scripts/myFile                                         | postgres
    5146 | GEN_SQL_GROUP      | END                     | myGroup2          | 11602 generated statements                                                                                         | postgres
    5147 | GEN_SQL_GROUPS     | BEGIN                   | myGroup1,myGroup2 | From mark Multi-1 to current situation towards /tmp/emaj_test/sql_scripts/myFile                                   | postgres
    5148 | GEN_SQL_GROUPS     | END                     | myGroup1,myGroup2 | 11714 generated statements                                                                                         | postgres
    5149 | GEN_SQL_GROUPS     | BEGIN                   | myGroup1,myGroup2 | From mark Multi-2 to mark Multi-3 towards /tmp/emaj_test/sql_scripts/myFile                                        | postgres
    5150 | GEN_SQL_GROUPS     | END                     | myGroup1,myGroup2 | 114 generated statements                                                                                           | postgres
    5151 | GEN_SQL_GROUP      | BEGIN                   | myGroup2          | From initial mark to mark EMAJ_LAST_MARK towards /tmp/emaj_test/sql_scripts/myFile                                 | postgres
    5152 | GEN_SQL_GROUP      | END                     | myGroup2          | 11712 generated statements                                                                                         | postgres
    5153 | GEN_SQL_GROUP      | BEGIN                   | myGroup2          | From initial mark to mark EMAJ_LAST_MARK towards /tmp/emaj_test/sql_scripts/myFile with tables/sequences filtering | postgres
    5154 | GEN_SQL_GROUP      | END                     | myGroup2          | 11712 generated statements                                                                                         | postgres
    5155 | GEN_SQL_GROUP      | BEGIN                   | myGroup2          | From initial mark to mark EMAJ_LAST_MARK towards /tmp/emaj_test/sql_scripts/myFile with tables/sequences filtering | postgres
    5156 | GEN_SQL_GROUP      | END                     | myGroup2          | 11711 generated statements                                                                                         | postgres
    5157 | GEN_SQL_GROUP      | BEGIN                   | myGroup2          | From initial mark to mark EMAJ_LAST_MARK towards /tmp/emaj_test/sql_scripts/myFile with tables/sequences filtering | postgres
    5158 | GEN_SQL_GROUP      | END                     | myGroup2          | 11611 generated statements                                                                                         | postgres
    5159 | GEN_SQL_GROUP      | BEGIN                   | myGroup2          | From initial mark to mark EMAJ_LAST_MARK towards /tmp/emaj_test/sql_scripts/myFile with tables/sequences filtering | postgres
    5160 | GEN_SQL_GROUP      | END                     | myGroup2          | 1 generated statements                                                                                             | postgres
    5161 | GEN_SQL_GROUP      | BEGIN                   | myGroup2          | From initial mark to mark EMAJ_LAST_MARK towards /tmp/emaj_test/sql_scripts/myFile with tables/sequences filtering | postgres
    5162 | GEN_SQL_GROUP      | END                     | myGroup2          | 100 generated statements                                                                                           | postgres
    5163 | GEN_SQL_GROUPS     | BEGIN                   | myGroup1,myGroup2 | From mark Multi-1 to mark Multi-3 towards /tmp/emaj_test/sql_scripts/myFile with tables/sequences filtering        | postgres
    5164 | GEN_SQL_GROUPS     | END                     | myGroup1,myGroup2 | 100 generated statements                                                                                           | postgres
    5232 | DISABLE_PROTECTION | EVENT TRIGGERS DISABLED |                   | <none>                                                                                                             | postgres
    5233 | ENABLE_PROTECTION  | EVENT TRIGGERS ENABLED  |                   | emaj_protection_trg, emaj_sql_drop_trg                                                                             | postgres
    5234 | ENABLE_PROTECTION  | EVENT TRIGGERS ENABLED  |                   | <none>                                                                                                             | postgres
(85 rows)

